generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Combine_Score {
  id                Int     @id @default(autoincrement())
  fortyTime         Float?  @db.Float
  tenYardSplit      Float?  @db.Float
  twentyYardShuttle Float?  @db.Float
  threeCone         Float?  @db.Float
  verticalLeap      Float?  @db.Float
  playerId          Int?
  broadJump         Float?  @db.Float
  Player            Player? @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Combine_Score_1")

  @@index([playerId], map: "fk_Combine_Score_1_idx")
}

model Pick {
  id                Int     @id @default(autoincrement())
  selectionRound    Int?
  selectionNumber   Int?
  selectionYear     String? @db.VarChar(4)
  selectionPickFrom String? @db.VarChar(45)
  selectionPickTo   String? @db.VarChar(45)
  combineScore      Int?
  Team_id           Int
  Player_id         Int
  Player            Player  @relation(fields: [Player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Pick_Player1")
  Team              Team    @relation(fields: [Team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Pick_Team1")

  @@index([Player_id], map: "fk_Pick_Player1_idx")
  @@index([Team_id], map: "fk_Pick_Team1_idx")
}

model Player {
  id                  Int             @id @default(autoincrement())
  firstName           String          @db.VarChar(45)
  lastName            String          @db.VarChar(45)
  age                 Int
  height              Float?          @db.Float
  weight              Float?          @db.Float
  handSize            Float?          @db.Float
  armLength           Float?          @db.Float
  homeCity            String?         @db.VarChar(45)
  homeState           String?         @db.VarChar(45)
  university          String?         @db.VarChar(75)
  status              String?         @db.VarChar(45)
  position            String?         @db.VarChar(75)
  teamId              Int?
  year_entered_league Int?
  Combine_Score       Combine_Score[]
  Pick                Pick[]
  Team                Team?           @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Player_Team")
  Player_Award        Player_Award[]

  @@index([teamId], map: "fk_Player_Team_idx")
}

model Player_Award {
  id           Int     @id @default(autoincrement())
  playerId     Int
  award_name   String? @db.VarChar(45)
  year_awarded Int?
  Player       Player  @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Player_Awards")

  @@index([playerId], map: "FK_Player_Awards_idx")
}

model Post_Season_Result {
  id                 Int     @id @default(autoincrement())
  playoff_year       Int
  last_round_reached String? @db.VarChar(45)
  win_lose           String? @db.VarChar(1)
  opponent_score     Int?
  team_score         Int?
  teamId             Int?
  Team               Team?   @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_Team")

  @@index([teamId], map: "fk_Team_idx")
}

model Schedule {
  id                             Int       @id @default(autoincrement())
  opponentId                     Int
  homeTeamId                     Int?
  scheduleWeek                   Int?
  gameDate                       DateTime? @db.Date
  gameCity                       String?   @db.VarChar(45)
  gameStateProvince              String?   @db.VarChar(45)
  gameCountry                    String?   @db.VarChar(45)
  gameLocation                   String?   @db.VarChar(75)
  opponentConference             String?   @db.VarChar(45)
  opponentDivision               String?   @db.VarChar(45)
  wonLostFlag                    String?   @db.VarChar(1)
  homeOrAway                     String?   @db.VarChar(1)
  opponentScore                  Int?
  homeScore                      Int?
  Team_Schedule_homeTeamIdToTeam Team?     @relation("Schedule_homeTeamIdToTeam", fields: [homeTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Home")
  Team_Schedule_opponentIdToTeam Team      @relation("Schedule_opponentIdToTeam", fields: [opponentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Visitor")

  @@index([opponentId], map: "fk_Schedule_1_idx")
  @@index([homeTeamId], map: "fk_Schedule_Home_idx")
}

model Team {
  id                                 Int                  @id @default(autoincrement())
  name                               String               @db.VarChar(45)
  city                               String?              @db.VarChar(45)
  state                              String?              @db.VarChar(45)
  conference                         String?              @db.VarChar(35)
  Pick                               Pick[]
  Player                             Player[]
  Post_Season_Result                 Post_Season_Result[]
  Schedule_Schedule_homeTeamIdToTeam Schedule[]           @relation("Schedule_homeTeamIdToTeam")
  Schedule_Schedule_opponentIdToTeam Schedule[]           @relation("Schedule_opponentIdToTeam")
}
