
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.10.2
 * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
 */
Prisma.prismaVersion = {
  client: "5.10.2",
  engine: "5a9203d0590c951969e85a7d07215503f4672eb9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Combine_ScoreScalarFieldEnum = {
  id: 'id',
  fortyTime: 'fortyTime',
  tenYardSplit: 'tenYardSplit',
  twentyYardShuttle: 'twentyYardShuttle',
  threeCone: 'threeCone',
  verticalLeap: 'verticalLeap',
  playerId: 'playerId',
  broadJump: 'broadJump'
};

exports.Prisma.PickScalarFieldEnum = {
  id: 'id',
  selectionRound: 'selectionRound',
  selectionNumber: 'selectionNumber',
  selectionYear: 'selectionYear',
  selectionPickFrom: 'selectionPickFrom',
  selectionPickTo: 'selectionPickTo',
  combineScore: 'combineScore',
  Team_id: 'Team_id',
  Player_id: 'Player_id'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  age: 'age',
  height: 'height',
  weight: 'weight',
  handSize: 'handSize',
  armLength: 'armLength',
  homeCity: 'homeCity',
  homeState: 'homeState',
  university: 'university',
  status: 'status',
  position: 'position',
  teamId: 'teamId',
  year_entered_league: 'year_entered_league'
};

exports.Prisma.Player_AwardScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  award_name: 'award_name',
  year_awarded: 'year_awarded'
};

exports.Prisma.Post_Season_ResultScalarFieldEnum = {
  id: 'id',
  playoff_year: 'playoff_year',
  last_round_reached: 'last_round_reached',
  win_lose: 'win_lose',
  opponent_score: 'opponent_score',
  team_score: 'team_score',
  teamId: 'teamId'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  opponentId: 'opponentId',
  homeTeamId: 'homeTeamId',
  scheduleWeek: 'scheduleWeek',
  gameDate: 'gameDate',
  gameCity: 'gameCity',
  gameStateProvince: 'gameStateProvince',
  gameCountry: 'gameCountry',
  gameLocation: 'gameLocation',
  opponentConference: 'opponentConference',
  opponentDivision: 'opponentDivision',
  wonLostFlag: 'wonLostFlag',
  homeOrAway: 'homeOrAway',
  opponentScore: 'opponentScore',
  homeScore: 'homeScore'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city: 'city',
  state: 'state',
  conference: 'conference'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Combine_Score: 'Combine_Score',
  Pick: 'Pick',
  Player: 'Player',
  Player_Award: 'Player_Award',
  Post_Season_Result: 'Post_Season_Result',
  Schedule: 'Schedule',
  Team: 'Team'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions or Edge Middleware',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
