
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Combine_Score
 * 
 */
export type Combine_Score = $Result.DefaultSelection<Prisma.$Combine_ScorePayload>
/**
 * Model Pick
 * 
 */
export type Pick = $Result.DefaultSelection<Prisma.$PickPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Player_Award
 * 
 */
export type Player_Award = $Result.DefaultSelection<Prisma.$Player_AwardPayload>
/**
 * Model Post_Season_Result
 * 
 */
export type Post_Season_Result = $Result.DefaultSelection<Prisma.$Post_Season_ResultPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Combine_Scores
 * const combine_Scores = await prisma.combine_Score.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Combine_Scores
   * const combine_Scores = await prisma.combine_Score.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.combine_Score`: Exposes CRUD operations for the **Combine_Score** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Combine_Scores
    * const combine_Scores = await prisma.combine_Score.findMany()
    * ```
    */
  get combine_Score(): Prisma.Combine_ScoreDelegate<ExtArgs>;

  /**
   * `prisma.pick`: Exposes CRUD operations for the **Pick** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Picks
    * const picks = await prisma.pick.findMany()
    * ```
    */
  get pick(): Prisma.PickDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.player_Award`: Exposes CRUD operations for the **Player_Award** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Player_Awards
    * const player_Awards = await prisma.player_Award.findMany()
    * ```
    */
  get player_Award(): Prisma.Player_AwardDelegate<ExtArgs>;

  /**
   * `prisma.post_Season_Result`: Exposes CRUD operations for the **Post_Season_Result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_Season_Results
    * const post_Season_Results = await prisma.post_Season_Result.findMany()
    * ```
    */
  get post_Season_Result(): Prisma.Post_Season_ResultDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Combine_Score: 'Combine_Score',
    Pick: 'Pick',
    Player: 'Player',
    Player_Award: 'Player_Award',
    Post_Season_Result: 'Post_Season_Result',
    Schedule: 'Schedule',
    Team: 'Team'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'combine_Score' | 'pick' | 'player' | 'player_Award' | 'post_Season_Result' | 'schedule' | 'team'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Combine_Score: {
        payload: Prisma.$Combine_ScorePayload<ExtArgs>
        fields: Prisma.Combine_ScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Combine_ScoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Combine_ScoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          findFirst: {
            args: Prisma.Combine_ScoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Combine_ScoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          findMany: {
            args: Prisma.Combine_ScoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>[]
          }
          create: {
            args: Prisma.Combine_ScoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          createMany: {
            args: Prisma.Combine_ScoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Combine_ScoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          update: {
            args: Prisma.Combine_ScoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          deleteMany: {
            args: Prisma.Combine_ScoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Combine_ScoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Combine_ScoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Combine_ScorePayload>
          }
          aggregate: {
            args: Prisma.Combine_ScoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCombine_Score>
          }
          groupBy: {
            args: Prisma.Combine_ScoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Combine_ScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.Combine_ScoreCountArgs<ExtArgs>,
            result: $Utils.Optional<Combine_ScoreCountAggregateOutputType> | number
          }
        }
      }
      Pick: {
        payload: Prisma.$PickPayload<ExtArgs>
        fields: Prisma.PickFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PickFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PickFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          findFirst: {
            args: Prisma.PickFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PickFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          findMany: {
            args: Prisma.PickFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>[]
          }
          create: {
            args: Prisma.PickCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          createMany: {
            args: Prisma.PickCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PickDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          update: {
            args: Prisma.PickUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          deleteMany: {
            args: Prisma.PickDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PickUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PickUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          aggregate: {
            args: Prisma.PickAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePick>
          }
          groupBy: {
            args: Prisma.PickGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PickGroupByOutputType>[]
          }
          count: {
            args: Prisma.PickCountArgs<ExtArgs>,
            result: $Utils.Optional<PickCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>,
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Player_Award: {
        payload: Prisma.$Player_AwardPayload<ExtArgs>
        fields: Prisma.Player_AwardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Player_AwardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Player_AwardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          findFirst: {
            args: Prisma.Player_AwardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Player_AwardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          findMany: {
            args: Prisma.Player_AwardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>[]
          }
          create: {
            args: Prisma.Player_AwardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          createMany: {
            args: Prisma.Player_AwardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Player_AwardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          update: {
            args: Prisma.Player_AwardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          deleteMany: {
            args: Prisma.Player_AwardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Player_AwardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Player_AwardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Player_AwardPayload>
          }
          aggregate: {
            args: Prisma.Player_AwardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlayer_Award>
          }
          groupBy: {
            args: Prisma.Player_AwardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Player_AwardGroupByOutputType>[]
          }
          count: {
            args: Prisma.Player_AwardCountArgs<ExtArgs>,
            result: $Utils.Optional<Player_AwardCountAggregateOutputType> | number
          }
        }
      }
      Post_Season_Result: {
        payload: Prisma.$Post_Season_ResultPayload<ExtArgs>
        fields: Prisma.Post_Season_ResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Post_Season_ResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Post_Season_ResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          findFirst: {
            args: Prisma.Post_Season_ResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Post_Season_ResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          findMany: {
            args: Prisma.Post_Season_ResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>[]
          }
          create: {
            args: Prisma.Post_Season_ResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          createMany: {
            args: Prisma.Post_Season_ResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Post_Season_ResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          update: {
            args: Prisma.Post_Season_ResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          deleteMany: {
            args: Prisma.Post_Season_ResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Post_Season_ResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Post_Season_ResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Post_Season_ResultPayload>
          }
          aggregate: {
            args: Prisma.Post_Season_ResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePost_Season_Result>
          }
          groupBy: {
            args: Prisma.Post_Season_ResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Post_Season_ResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.Post_Season_ResultCountArgs<ExtArgs>,
            result: $Utils.Optional<Post_Season_ResultCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>,
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    Combine_Score: number
    Pick: number
    Player_Award: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Combine_Score?: boolean | PlayerCountOutputTypeCountCombine_ScoreArgs
    Pick?: boolean | PlayerCountOutputTypeCountPickArgs
    Player_Award?: boolean | PlayerCountOutputTypeCountPlayer_AwardArgs
  }

  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountCombine_ScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Combine_ScoreWhereInput
  }


  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }


  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountPlayer_AwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Player_AwardWhereInput
  }



  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    Pick: number
    Player: number
    Post_Season_Result: number
    Schedule_Schedule_homeTeamIdToTeam: number
    Schedule_Schedule_opponentIdToTeam: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pick?: boolean | TeamCountOutputTypeCountPickArgs
    Player?: boolean | TeamCountOutputTypeCountPlayerArgs
    Post_Season_Result?: boolean | TeamCountOutputTypeCountPost_Season_ResultArgs
    Schedule_Schedule_homeTeamIdToTeam?: boolean | TeamCountOutputTypeCountSchedule_Schedule_homeTeamIdToTeamArgs
    Schedule_Schedule_opponentIdToTeam?: boolean | TeamCountOutputTypeCountSchedule_Schedule_opponentIdToTeamArgs
  }

  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPost_Season_ResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Post_Season_ResultWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSchedule_Schedule_homeTeamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSchedule_Schedule_opponentIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Combine_Score
   */

  export type AggregateCombine_Score = {
    _count: Combine_ScoreCountAggregateOutputType | null
    _avg: Combine_ScoreAvgAggregateOutputType | null
    _sum: Combine_ScoreSumAggregateOutputType | null
    _min: Combine_ScoreMinAggregateOutputType | null
    _max: Combine_ScoreMaxAggregateOutputType | null
  }

  export type Combine_ScoreAvgAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type Combine_ScoreSumAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type Combine_ScoreMinAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type Combine_ScoreMaxAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type Combine_ScoreCountAggregateOutputType = {
    id: number
    fortyTime: number
    tenYardSplit: number
    twentyYardShuttle: number
    threeCone: number
    verticalLeap: number
    playerId: number
    broadJump: number
    _all: number
  }


  export type Combine_ScoreAvgAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type Combine_ScoreSumAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type Combine_ScoreMinAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type Combine_ScoreMaxAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type Combine_ScoreCountAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
    _all?: true
  }

  export type Combine_ScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Combine_Score to aggregate.
     */
    where?: Combine_ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combine_Scores to fetch.
     */
    orderBy?: Combine_ScoreOrderByWithRelationInput | Combine_ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Combine_ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combine_Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combine_Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Combine_Scores
    **/
    _count?: true | Combine_ScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Combine_ScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Combine_ScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Combine_ScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Combine_ScoreMaxAggregateInputType
  }

  export type GetCombine_ScoreAggregateType<T extends Combine_ScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCombine_Score]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCombine_Score[P]>
      : GetScalarType<T[P], AggregateCombine_Score[P]>
  }




  export type Combine_ScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Combine_ScoreWhereInput
    orderBy?: Combine_ScoreOrderByWithAggregationInput | Combine_ScoreOrderByWithAggregationInput[]
    by: Combine_ScoreScalarFieldEnum[] | Combine_ScoreScalarFieldEnum
    having?: Combine_ScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Combine_ScoreCountAggregateInputType | true
    _avg?: Combine_ScoreAvgAggregateInputType
    _sum?: Combine_ScoreSumAggregateInputType
    _min?: Combine_ScoreMinAggregateInputType
    _max?: Combine_ScoreMaxAggregateInputType
  }

  export type Combine_ScoreGroupByOutputType = {
    id: number
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
    _count: Combine_ScoreCountAggregateOutputType | null
    _avg: Combine_ScoreAvgAggregateOutputType | null
    _sum: Combine_ScoreSumAggregateOutputType | null
    _min: Combine_ScoreMinAggregateOutputType | null
    _max: Combine_ScoreMaxAggregateOutputType | null
  }

  type GetCombine_ScoreGroupByPayload<T extends Combine_ScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Combine_ScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Combine_ScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Combine_ScoreGroupByOutputType[P]>
            : GetScalarType<T[P], Combine_ScoreGroupByOutputType[P]>
        }
      >
    >


  export type Combine_ScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    twentyYardShuttle?: boolean
    threeCone?: boolean
    verticalLeap?: boolean
    playerId?: boolean
    broadJump?: boolean
    Player?: boolean | Combine_Score$PlayerArgs<ExtArgs>
  }, ExtArgs["result"]["combine_Score"]>

  export type Combine_ScoreSelectScalar = {
    id?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    twentyYardShuttle?: boolean
    threeCone?: boolean
    verticalLeap?: boolean
    playerId?: boolean
    broadJump?: boolean
  }

  export type Combine_ScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | Combine_Score$PlayerArgs<ExtArgs>
  }


  export type $Combine_ScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Combine_Score"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fortyTime: number | null
      tenYardSplit: number | null
      twentyYardShuttle: number | null
      threeCone: number | null
      verticalLeap: number | null
      playerId: number | null
      broadJump: number | null
    }, ExtArgs["result"]["combine_Score"]>
    composites: {}
  }


  type Combine_ScoreGetPayload<S extends boolean | null | undefined | Combine_ScoreDefaultArgs> = $Result.GetResult<Prisma.$Combine_ScorePayload, S>

  type Combine_ScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Combine_ScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Combine_ScoreCountAggregateInputType | true
    }

  export interface Combine_ScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Combine_Score'], meta: { name: 'Combine_Score' } }
    /**
     * Find zero or one Combine_Score that matches the filter.
     * @param {Combine_ScoreFindUniqueArgs} args - Arguments to find a Combine_Score
     * @example
     * // Get one Combine_Score
     * const combine_Score = await prisma.combine_Score.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Combine_ScoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreFindUniqueArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Combine_Score that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Combine_ScoreFindUniqueOrThrowArgs} args - Arguments to find a Combine_Score
     * @example
     * // Get one Combine_Score
     * const combine_Score = await prisma.combine_Score.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Combine_ScoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Combine_Score that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreFindFirstArgs} args - Arguments to find a Combine_Score
     * @example
     * // Get one Combine_Score
     * const combine_Score = await prisma.combine_Score.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Combine_ScoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreFindFirstArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Combine_Score that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreFindFirstOrThrowArgs} args - Arguments to find a Combine_Score
     * @example
     * // Get one Combine_Score
     * const combine_Score = await prisma.combine_Score.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Combine_ScoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Combine_Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Combine_Scores
     * const combine_Scores = await prisma.combine_Score.findMany()
     * 
     * // Get first 10 Combine_Scores
     * const combine_Scores = await prisma.combine_Score.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const combine_ScoreWithIdOnly = await prisma.combine_Score.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Combine_ScoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Combine_Score.
     * @param {Combine_ScoreCreateArgs} args - Arguments to create a Combine_Score.
     * @example
     * // Create one Combine_Score
     * const Combine_Score = await prisma.combine_Score.create({
     *   data: {
     *     // ... data to create a Combine_Score
     *   }
     * })
     * 
    **/
    create<T extends Combine_ScoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreCreateArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Combine_Scores.
     *     @param {Combine_ScoreCreateManyArgs} args - Arguments to create many Combine_Scores.
     *     @example
     *     // Create many Combine_Scores
     *     const combine_Score = await prisma.combine_Score.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Combine_ScoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Combine_Score.
     * @param {Combine_ScoreDeleteArgs} args - Arguments to delete one Combine_Score.
     * @example
     * // Delete one Combine_Score
     * const Combine_Score = await prisma.combine_Score.delete({
     *   where: {
     *     // ... filter to delete one Combine_Score
     *   }
     * })
     * 
    **/
    delete<T extends Combine_ScoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreDeleteArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Combine_Score.
     * @param {Combine_ScoreUpdateArgs} args - Arguments to update one Combine_Score.
     * @example
     * // Update one Combine_Score
     * const combine_Score = await prisma.combine_Score.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Combine_ScoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreUpdateArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Combine_Scores.
     * @param {Combine_ScoreDeleteManyArgs} args - Arguments to filter Combine_Scores to delete.
     * @example
     * // Delete a few Combine_Scores
     * const { count } = await prisma.combine_Score.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Combine_ScoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Combine_ScoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Combine_Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Combine_Scores
     * const combine_Score = await prisma.combine_Score.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Combine_ScoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Combine_Score.
     * @param {Combine_ScoreUpsertArgs} args - Arguments to update or create a Combine_Score.
     * @example
     * // Update or create a Combine_Score
     * const combine_Score = await prisma.combine_Score.upsert({
     *   create: {
     *     // ... data to create a Combine_Score
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Combine_Score we want to update
     *   }
     * })
    **/
    upsert<T extends Combine_ScoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Combine_ScoreUpsertArgs<ExtArgs>>
    ): Prisma__Combine_ScoreClient<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Combine_Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreCountArgs} args - Arguments to filter Combine_Scores to count.
     * @example
     * // Count the number of Combine_Scores
     * const count = await prisma.combine_Score.count({
     *   where: {
     *     // ... the filter for the Combine_Scores we want to count
     *   }
     * })
    **/
    count<T extends Combine_ScoreCountArgs>(
      args?: Subset<T, Combine_ScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Combine_ScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Combine_Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Combine_ScoreAggregateArgs>(args: Subset<T, Combine_ScoreAggregateArgs>): Prisma.PrismaPromise<GetCombine_ScoreAggregateType<T>>

    /**
     * Group by Combine_Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Combine_ScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Combine_ScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Combine_ScoreGroupByArgs['orderBy'] }
        : { orderBy?: Combine_ScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Combine_ScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCombine_ScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Combine_Score model
   */
  readonly fields: Combine_ScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Combine_Score.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Combine_ScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Player<T extends Combine_Score$PlayerArgs<ExtArgs> = {}>(args?: Subset<T, Combine_Score$PlayerArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Combine_Score model
   */ 
  interface Combine_ScoreFieldRefs {
    readonly id: FieldRef<"Combine_Score", 'Int'>
    readonly fortyTime: FieldRef<"Combine_Score", 'Float'>
    readonly tenYardSplit: FieldRef<"Combine_Score", 'Float'>
    readonly twentyYardShuttle: FieldRef<"Combine_Score", 'Float'>
    readonly threeCone: FieldRef<"Combine_Score", 'Float'>
    readonly verticalLeap: FieldRef<"Combine_Score", 'Float'>
    readonly playerId: FieldRef<"Combine_Score", 'Int'>
    readonly broadJump: FieldRef<"Combine_Score", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Combine_Score findUnique
   */
  export type Combine_ScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Combine_Score to fetch.
     */
    where: Combine_ScoreWhereUniqueInput
  }


  /**
   * Combine_Score findUniqueOrThrow
   */
  export type Combine_ScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Combine_Score to fetch.
     */
    where: Combine_ScoreWhereUniqueInput
  }


  /**
   * Combine_Score findFirst
   */
  export type Combine_ScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Combine_Score to fetch.
     */
    where?: Combine_ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combine_Scores to fetch.
     */
    orderBy?: Combine_ScoreOrderByWithRelationInput | Combine_ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Combine_Scores.
     */
    cursor?: Combine_ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combine_Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combine_Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Combine_Scores.
     */
    distinct?: Combine_ScoreScalarFieldEnum | Combine_ScoreScalarFieldEnum[]
  }


  /**
   * Combine_Score findFirstOrThrow
   */
  export type Combine_ScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Combine_Score to fetch.
     */
    where?: Combine_ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combine_Scores to fetch.
     */
    orderBy?: Combine_ScoreOrderByWithRelationInput | Combine_ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Combine_Scores.
     */
    cursor?: Combine_ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combine_Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combine_Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Combine_Scores.
     */
    distinct?: Combine_ScoreScalarFieldEnum | Combine_ScoreScalarFieldEnum[]
  }


  /**
   * Combine_Score findMany
   */
  export type Combine_ScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Combine_Scores to fetch.
     */
    where?: Combine_ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combine_Scores to fetch.
     */
    orderBy?: Combine_ScoreOrderByWithRelationInput | Combine_ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Combine_Scores.
     */
    cursor?: Combine_ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combine_Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combine_Scores.
     */
    skip?: number
    distinct?: Combine_ScoreScalarFieldEnum | Combine_ScoreScalarFieldEnum[]
  }


  /**
   * Combine_Score create
   */
  export type Combine_ScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Combine_Score.
     */
    data?: XOR<Combine_ScoreCreateInput, Combine_ScoreUncheckedCreateInput>
  }


  /**
   * Combine_Score createMany
   */
  export type Combine_ScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Combine_Scores.
     */
    data: Combine_ScoreCreateManyInput | Combine_ScoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Combine_Score update
   */
  export type Combine_ScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Combine_Score.
     */
    data: XOR<Combine_ScoreUpdateInput, Combine_ScoreUncheckedUpdateInput>
    /**
     * Choose, which Combine_Score to update.
     */
    where: Combine_ScoreWhereUniqueInput
  }


  /**
   * Combine_Score updateMany
   */
  export type Combine_ScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Combine_Scores.
     */
    data: XOR<Combine_ScoreUpdateManyMutationInput, Combine_ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Combine_Scores to update
     */
    where?: Combine_ScoreWhereInput
  }


  /**
   * Combine_Score upsert
   */
  export type Combine_ScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Combine_Score to update in case it exists.
     */
    where: Combine_ScoreWhereUniqueInput
    /**
     * In case the Combine_Score found by the `where` argument doesn't exist, create a new Combine_Score with this data.
     */
    create: XOR<Combine_ScoreCreateInput, Combine_ScoreUncheckedCreateInput>
    /**
     * In case the Combine_Score was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Combine_ScoreUpdateInput, Combine_ScoreUncheckedUpdateInput>
  }


  /**
   * Combine_Score delete
   */
  export type Combine_ScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    /**
     * Filter which Combine_Score to delete.
     */
    where: Combine_ScoreWhereUniqueInput
  }


  /**
   * Combine_Score deleteMany
   */
  export type Combine_ScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Combine_Scores to delete
     */
    where?: Combine_ScoreWhereInput
  }


  /**
   * Combine_Score.Player
   */
  export type Combine_Score$PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
  }


  /**
   * Combine_Score without action
   */
  export type Combine_ScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
  }



  /**
   * Model Pick
   */

  export type AggregatePick = {
    _count: PickCountAggregateOutputType | null
    _avg: PickAvgAggregateOutputType | null
    _sum: PickSumAggregateOutputType | null
    _min: PickMinAggregateOutputType | null
    _max: PickMaxAggregateOutputType | null
  }

  export type PickAvgAggregateOutputType = {
    id: number | null
    selectionRound: number | null
    selectionNumber: number | null
    combineScore: number | null
    Team_id: number | null
    Player_id: number | null
  }

  export type PickSumAggregateOutputType = {
    id: number | null
    selectionRound: number | null
    selectionNumber: number | null
    combineScore: number | null
    Team_id: number | null
    Player_id: number | null
  }

  export type PickMinAggregateOutputType = {
    id: number | null
    selectionRound: number | null
    selectionNumber: number | null
    selectionYear: string | null
    selectionPickFrom: string | null
    selectionPickTo: string | null
    combineScore: number | null
    Team_id: number | null
    Player_id: number | null
  }

  export type PickMaxAggregateOutputType = {
    id: number | null
    selectionRound: number | null
    selectionNumber: number | null
    selectionYear: string | null
    selectionPickFrom: string | null
    selectionPickTo: string | null
    combineScore: number | null
    Team_id: number | null
    Player_id: number | null
  }

  export type PickCountAggregateOutputType = {
    id: number
    selectionRound: number
    selectionNumber: number
    selectionYear: number
    selectionPickFrom: number
    selectionPickTo: number
    combineScore: number
    Team_id: number
    Player_id: number
    _all: number
  }


  export type PickAvgAggregateInputType = {
    id?: true
    selectionRound?: true
    selectionNumber?: true
    combineScore?: true
    Team_id?: true
    Player_id?: true
  }

  export type PickSumAggregateInputType = {
    id?: true
    selectionRound?: true
    selectionNumber?: true
    combineScore?: true
    Team_id?: true
    Player_id?: true
  }

  export type PickMinAggregateInputType = {
    id?: true
    selectionRound?: true
    selectionNumber?: true
    selectionYear?: true
    selectionPickFrom?: true
    selectionPickTo?: true
    combineScore?: true
    Team_id?: true
    Player_id?: true
  }

  export type PickMaxAggregateInputType = {
    id?: true
    selectionRound?: true
    selectionNumber?: true
    selectionYear?: true
    selectionPickFrom?: true
    selectionPickTo?: true
    combineScore?: true
    Team_id?: true
    Player_id?: true
  }

  export type PickCountAggregateInputType = {
    id?: true
    selectionRound?: true
    selectionNumber?: true
    selectionYear?: true
    selectionPickFrom?: true
    selectionPickTo?: true
    combineScore?: true
    Team_id?: true
    Player_id?: true
    _all?: true
  }

  export type PickAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pick to aggregate.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Picks
    **/
    _count?: true | PickCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PickAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PickSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PickMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PickMaxAggregateInputType
  }

  export type GetPickAggregateType<T extends PickAggregateArgs> = {
        [P in keyof T & keyof AggregatePick]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePick[P]>
      : GetScalarType<T[P], AggregatePick[P]>
  }




  export type PickGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
    orderBy?: PickOrderByWithAggregationInput | PickOrderByWithAggregationInput[]
    by: PickScalarFieldEnum[] | PickScalarFieldEnum
    having?: PickScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PickCountAggregateInputType | true
    _avg?: PickAvgAggregateInputType
    _sum?: PickSumAggregateInputType
    _min?: PickMinAggregateInputType
    _max?: PickMaxAggregateInputType
  }

  export type PickGroupByOutputType = {
    id: number
    selectionRound: number | null
    selectionNumber: number | null
    selectionYear: string | null
    selectionPickFrom: string | null
    selectionPickTo: string | null
    combineScore: number | null
    Team_id: number
    Player_id: number
    _count: PickCountAggregateOutputType | null
    _avg: PickAvgAggregateOutputType | null
    _sum: PickSumAggregateOutputType | null
    _min: PickMinAggregateOutputType | null
    _max: PickMaxAggregateOutputType | null
  }

  type GetPickGroupByPayload<T extends PickGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PickGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PickGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PickGroupByOutputType[P]>
            : GetScalarType<T[P], PickGroupByOutputType[P]>
        }
      >
    >


  export type PickSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectionRound?: boolean
    selectionNumber?: boolean
    selectionYear?: boolean
    selectionPickFrom?: boolean
    selectionPickTo?: boolean
    combineScore?: boolean
    Team_id?: boolean
    Player_id?: boolean
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pick"]>

  export type PickSelectScalar = {
    id?: boolean
    selectionRound?: boolean
    selectionNumber?: boolean
    selectionYear?: boolean
    selectionPickFrom?: boolean
    selectionPickTo?: boolean
    combineScore?: boolean
    Team_id?: boolean
    Player_id?: boolean
  }

  export type PickInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }


  export type $PickPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pick"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs>
      Team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      selectionRound: number | null
      selectionNumber: number | null
      selectionYear: string | null
      selectionPickFrom: string | null
      selectionPickTo: string | null
      combineScore: number | null
      Team_id: number
      Player_id: number
    }, ExtArgs["result"]["pick"]>
    composites: {}
  }


  type PickGetPayload<S extends boolean | null | undefined | PickDefaultArgs> = $Result.GetResult<Prisma.$PickPayload, S>

  type PickCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PickFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PickCountAggregateInputType | true
    }

  export interface PickDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pick'], meta: { name: 'Pick' } }
    /**
     * Find zero or one Pick that matches the filter.
     * @param {PickFindUniqueArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PickFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PickFindUniqueArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pick that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PickFindUniqueOrThrowArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PickFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PickFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pick that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindFirstArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PickFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PickFindFirstArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pick that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindFirstOrThrowArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PickFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PickFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Picks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Picks
     * const picks = await prisma.pick.findMany()
     * 
     * // Get first 10 Picks
     * const picks = await prisma.pick.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pickWithIdOnly = await prisma.pick.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PickFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PickFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pick.
     * @param {PickCreateArgs} args - Arguments to create a Pick.
     * @example
     * // Create one Pick
     * const Pick = await prisma.pick.create({
     *   data: {
     *     // ... data to create a Pick
     *   }
     * })
     * 
    **/
    create<T extends PickCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PickCreateArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Picks.
     *     @param {PickCreateManyArgs} args - Arguments to create many Picks.
     *     @example
     *     // Create many Picks
     *     const pick = await prisma.pick.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PickCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PickCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pick.
     * @param {PickDeleteArgs} args - Arguments to delete one Pick.
     * @example
     * // Delete one Pick
     * const Pick = await prisma.pick.delete({
     *   where: {
     *     // ... filter to delete one Pick
     *   }
     * })
     * 
    **/
    delete<T extends PickDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PickDeleteArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pick.
     * @param {PickUpdateArgs} args - Arguments to update one Pick.
     * @example
     * // Update one Pick
     * const pick = await prisma.pick.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PickUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PickUpdateArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Picks.
     * @param {PickDeleteManyArgs} args - Arguments to filter Picks to delete.
     * @example
     * // Delete a few Picks
     * const { count } = await prisma.pick.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PickDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PickDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Picks
     * const pick = await prisma.pick.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PickUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PickUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pick.
     * @param {PickUpsertArgs} args - Arguments to update or create a Pick.
     * @example
     * // Update or create a Pick
     * const pick = await prisma.pick.upsert({
     *   create: {
     *     // ... data to create a Pick
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pick we want to update
     *   }
     * })
    **/
    upsert<T extends PickUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PickUpsertArgs<ExtArgs>>
    ): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickCountArgs} args - Arguments to filter Picks to count.
     * @example
     * // Count the number of Picks
     * const count = await prisma.pick.count({
     *   where: {
     *     // ... the filter for the Picks we want to count
     *   }
     * })
    **/
    count<T extends PickCountArgs>(
      args?: Subset<T, PickCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PickCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PickAggregateArgs>(args: Subset<T, PickAggregateArgs>): Prisma.PrismaPromise<GetPickAggregateType<T>>

    /**
     * Group by Pick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PickGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PickGroupByArgs['orderBy'] }
        : { orderBy?: PickGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PickGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPickGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pick model
   */
  readonly fields: PickFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pick.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PickClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pick model
   */ 
  interface PickFieldRefs {
    readonly id: FieldRef<"Pick", 'Int'>
    readonly selectionRound: FieldRef<"Pick", 'Int'>
    readonly selectionNumber: FieldRef<"Pick", 'Int'>
    readonly selectionYear: FieldRef<"Pick", 'String'>
    readonly selectionPickFrom: FieldRef<"Pick", 'String'>
    readonly selectionPickTo: FieldRef<"Pick", 'String'>
    readonly combineScore: FieldRef<"Pick", 'Int'>
    readonly Team_id: FieldRef<"Pick", 'Int'>
    readonly Player_id: FieldRef<"Pick", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pick findUnique
   */
  export type PickFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where: PickWhereUniqueInput
  }


  /**
   * Pick findUniqueOrThrow
   */
  export type PickFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where: PickWhereUniqueInput
  }


  /**
   * Pick findFirst
   */
  export type PickFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }


  /**
   * Pick findFirstOrThrow
   */
  export type PickFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }


  /**
   * Pick findMany
   */
  export type PickFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }


  /**
   * Pick create
   */
  export type PickCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The data needed to create a Pick.
     */
    data: XOR<PickCreateInput, PickUncheckedCreateInput>
  }


  /**
   * Pick createMany
   */
  export type PickCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Picks.
     */
    data: PickCreateManyInput | PickCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pick update
   */
  export type PickUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The data needed to update a Pick.
     */
    data: XOR<PickUpdateInput, PickUncheckedUpdateInput>
    /**
     * Choose, which Pick to update.
     */
    where: PickWhereUniqueInput
  }


  /**
   * Pick updateMany
   */
  export type PickUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Picks.
     */
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyInput>
    /**
     * Filter which Picks to update
     */
    where?: PickWhereInput
  }


  /**
   * Pick upsert
   */
  export type PickUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The filter to search for the Pick to update in case it exists.
     */
    where: PickWhereUniqueInput
    /**
     * In case the Pick found by the `where` argument doesn't exist, create a new Pick with this data.
     */
    create: XOR<PickCreateInput, PickUncheckedCreateInput>
    /**
     * In case the Pick was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PickUpdateInput, PickUncheckedUpdateInput>
  }


  /**
   * Pick delete
   */
  export type PickDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter which Pick to delete.
     */
    where: PickWhereUniqueInput
  }


  /**
   * Pick deleteMany
   */
  export type PickDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Picks to delete
     */
    where?: PickWhereInput
  }


  /**
   * Pick without action
   */
  export type PickDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
  }



  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    teamId: number | null
    year_entered_league: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    teamId: number | null
    year_entered_league: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    teamId: number | null
    year_entered_league: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    teamId: number | null
    year_entered_league: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    age: number
    height: number
    weight: number
    handSize: number
    armLength: number
    homeCity: number
    homeState: number
    university: number
    status: number
    position: number
    teamId: number
    year_entered_league: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    teamId?: true
    year_entered_league?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    teamId?: true
    year_entered_league?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    teamId?: true
    year_entered_league?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    teamId?: true
    year_entered_league?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    teamId?: true
    year_entered_league?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    age: number
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    teamId: number | null
    year_entered_league: number | null
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    age?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    university?: boolean
    status?: boolean
    position?: boolean
    teamId?: boolean
    year_entered_league?: boolean
    Combine_Score?: boolean | Player$Combine_ScoreArgs<ExtArgs>
    Pick?: boolean | Player$PickArgs<ExtArgs>
    Team?: boolean | Player$TeamArgs<ExtArgs>
    Player_Award?: boolean | Player$Player_AwardArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    age?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    university?: boolean
    status?: boolean
    position?: boolean
    teamId?: boolean
    year_entered_league?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Combine_Score?: boolean | Player$Combine_ScoreArgs<ExtArgs>
    Pick?: boolean | Player$PickArgs<ExtArgs>
    Team?: boolean | Player$TeamArgs<ExtArgs>
    Player_Award?: boolean | Player$Player_AwardArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      Combine_Score: Prisma.$Combine_ScorePayload<ExtArgs>[]
      Pick: Prisma.$PickPayload<ExtArgs>[]
      Team: Prisma.$TeamPayload<ExtArgs> | null
      Player_Award: Prisma.$Player_AwardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      age: number
      height: number | null
      weight: number | null
      handSize: number | null
      armLength: number | null
      homeCity: string | null
      homeState: string | null
      university: string | null
      status: string | null
      position: string | null
      teamId: number | null
      year_entered_league: number | null
    }, ExtArgs["result"]["player"]>
    composites: {}
  }


  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Players.
     *     @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     *     @example
     *     // Create many Players
     *     const player = await prisma.player.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Combine_Score<T extends Player$Combine_ScoreArgs<ExtArgs> = {}>(args?: Subset<T, Player$Combine_ScoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Combine_ScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    Pick<T extends Player$PickArgs<ExtArgs> = {}>(args?: Subset<T, Player$PickArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findMany'> | Null>;

    Team<T extends Player$TeamArgs<ExtArgs> = {}>(args?: Subset<T, Player$TeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Player_Award<T extends Player$Player_AwardArgs<ExtArgs> = {}>(args?: Subset<T, Player$Player_AwardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly firstName: FieldRef<"Player", 'String'>
    readonly lastName: FieldRef<"Player", 'String'>
    readonly age: FieldRef<"Player", 'Int'>
    readonly height: FieldRef<"Player", 'Float'>
    readonly weight: FieldRef<"Player", 'Float'>
    readonly handSize: FieldRef<"Player", 'Float'>
    readonly armLength: FieldRef<"Player", 'Float'>
    readonly homeCity: FieldRef<"Player", 'String'>
    readonly homeState: FieldRef<"Player", 'String'>
    readonly university: FieldRef<"Player", 'String'>
    readonly status: FieldRef<"Player", 'String'>
    readonly position: FieldRef<"Player", 'String'>
    readonly teamId: FieldRef<"Player", 'Int'>
    readonly year_entered_league: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }


  /**
   * Player.Combine_Score
   */
  export type Player$Combine_ScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Combine_Score
     */
    select?: Combine_ScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Combine_ScoreInclude<ExtArgs> | null
    where?: Combine_ScoreWhereInput
    orderBy?: Combine_ScoreOrderByWithRelationInput | Combine_ScoreOrderByWithRelationInput[]
    cursor?: Combine_ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Combine_ScoreScalarFieldEnum | Combine_ScoreScalarFieldEnum[]
  }


  /**
   * Player.Pick
   */
  export type Player$PickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }


  /**
   * Player.Team
   */
  export type Player$TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }


  /**
   * Player.Player_Award
   */
  export type Player$Player_AwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    where?: Player_AwardWhereInput
    orderBy?: Player_AwardOrderByWithRelationInput | Player_AwardOrderByWithRelationInput[]
    cursor?: Player_AwardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Player_AwardScalarFieldEnum | Player_AwardScalarFieldEnum[]
  }


  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
  }



  /**
   * Model Player_Award
   */

  export type AggregatePlayer_Award = {
    _count: Player_AwardCountAggregateOutputType | null
    _avg: Player_AwardAvgAggregateOutputType | null
    _sum: Player_AwardSumAggregateOutputType | null
    _min: Player_AwardMinAggregateOutputType | null
    _max: Player_AwardMaxAggregateOutputType | null
  }

  export type Player_AwardAvgAggregateOutputType = {
    id: number | null
    playerId: number | null
    year_awarded: number | null
  }

  export type Player_AwardSumAggregateOutputType = {
    id: number | null
    playerId: number | null
    year_awarded: number | null
  }

  export type Player_AwardMinAggregateOutputType = {
    id: number | null
    playerId: number | null
    award_name: string | null
    year_awarded: number | null
  }

  export type Player_AwardMaxAggregateOutputType = {
    id: number | null
    playerId: number | null
    award_name: string | null
    year_awarded: number | null
  }

  export type Player_AwardCountAggregateOutputType = {
    id: number
    playerId: number
    award_name: number
    year_awarded: number
    _all: number
  }


  export type Player_AwardAvgAggregateInputType = {
    id?: true
    playerId?: true
    year_awarded?: true
  }

  export type Player_AwardSumAggregateInputType = {
    id?: true
    playerId?: true
    year_awarded?: true
  }

  export type Player_AwardMinAggregateInputType = {
    id?: true
    playerId?: true
    award_name?: true
    year_awarded?: true
  }

  export type Player_AwardMaxAggregateInputType = {
    id?: true
    playerId?: true
    award_name?: true
    year_awarded?: true
  }

  export type Player_AwardCountAggregateInputType = {
    id?: true
    playerId?: true
    award_name?: true
    year_awarded?: true
    _all?: true
  }

  export type Player_AwardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player_Award to aggregate.
     */
    where?: Player_AwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Player_Awards to fetch.
     */
    orderBy?: Player_AwardOrderByWithRelationInput | Player_AwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Player_AwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Player_Awards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Player_Awards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Player_Awards
    **/
    _count?: true | Player_AwardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Player_AwardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Player_AwardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Player_AwardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Player_AwardMaxAggregateInputType
  }

  export type GetPlayer_AwardAggregateType<T extends Player_AwardAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer_Award]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer_Award[P]>
      : GetScalarType<T[P], AggregatePlayer_Award[P]>
  }




  export type Player_AwardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Player_AwardWhereInput
    orderBy?: Player_AwardOrderByWithAggregationInput | Player_AwardOrderByWithAggregationInput[]
    by: Player_AwardScalarFieldEnum[] | Player_AwardScalarFieldEnum
    having?: Player_AwardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Player_AwardCountAggregateInputType | true
    _avg?: Player_AwardAvgAggregateInputType
    _sum?: Player_AwardSumAggregateInputType
    _min?: Player_AwardMinAggregateInputType
    _max?: Player_AwardMaxAggregateInputType
  }

  export type Player_AwardGroupByOutputType = {
    id: number
    playerId: number
    award_name: string | null
    year_awarded: number | null
    _count: Player_AwardCountAggregateOutputType | null
    _avg: Player_AwardAvgAggregateOutputType | null
    _sum: Player_AwardSumAggregateOutputType | null
    _min: Player_AwardMinAggregateOutputType | null
    _max: Player_AwardMaxAggregateOutputType | null
  }

  type GetPlayer_AwardGroupByPayload<T extends Player_AwardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Player_AwardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Player_AwardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Player_AwardGroupByOutputType[P]>
            : GetScalarType<T[P], Player_AwardGroupByOutputType[P]>
        }
      >
    >


  export type Player_AwardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    award_name?: boolean
    year_awarded?: boolean
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player_Award"]>

  export type Player_AwardSelectScalar = {
    id?: boolean
    playerId?: boolean
    award_name?: boolean
    year_awarded?: boolean
  }

  export type Player_AwardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
  }


  export type $Player_AwardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player_Award"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playerId: number
      award_name: string | null
      year_awarded: number | null
    }, ExtArgs["result"]["player_Award"]>
    composites: {}
  }


  type Player_AwardGetPayload<S extends boolean | null | undefined | Player_AwardDefaultArgs> = $Result.GetResult<Prisma.$Player_AwardPayload, S>

  type Player_AwardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Player_AwardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Player_AwardCountAggregateInputType | true
    }

  export interface Player_AwardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player_Award'], meta: { name: 'Player_Award' } }
    /**
     * Find zero or one Player_Award that matches the filter.
     * @param {Player_AwardFindUniqueArgs} args - Arguments to find a Player_Award
     * @example
     * // Get one Player_Award
     * const player_Award = await prisma.player_Award.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Player_AwardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardFindUniqueArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Player_Award that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Player_AwardFindUniqueOrThrowArgs} args - Arguments to find a Player_Award
     * @example
     * // Get one Player_Award
     * const player_Award = await prisma.player_Award.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Player_AwardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Player_Award that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardFindFirstArgs} args - Arguments to find a Player_Award
     * @example
     * // Get one Player_Award
     * const player_Award = await prisma.player_Award.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Player_AwardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardFindFirstArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Player_Award that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardFindFirstOrThrowArgs} args - Arguments to find a Player_Award
     * @example
     * // Get one Player_Award
     * const player_Award = await prisma.player_Award.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Player_AwardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Player_Awards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Player_Awards
     * const player_Awards = await prisma.player_Award.findMany()
     * 
     * // Get first 10 Player_Awards
     * const player_Awards = await prisma.player_Award.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const player_AwardWithIdOnly = await prisma.player_Award.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Player_AwardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Player_Award.
     * @param {Player_AwardCreateArgs} args - Arguments to create a Player_Award.
     * @example
     * // Create one Player_Award
     * const Player_Award = await prisma.player_Award.create({
     *   data: {
     *     // ... data to create a Player_Award
     *   }
     * })
     * 
    **/
    create<T extends Player_AwardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardCreateArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Player_Awards.
     *     @param {Player_AwardCreateManyArgs} args - Arguments to create many Player_Awards.
     *     @example
     *     // Create many Player_Awards
     *     const player_Award = await prisma.player_Award.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Player_AwardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player_Award.
     * @param {Player_AwardDeleteArgs} args - Arguments to delete one Player_Award.
     * @example
     * // Delete one Player_Award
     * const Player_Award = await prisma.player_Award.delete({
     *   where: {
     *     // ... filter to delete one Player_Award
     *   }
     * })
     * 
    **/
    delete<T extends Player_AwardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardDeleteArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Player_Award.
     * @param {Player_AwardUpdateArgs} args - Arguments to update one Player_Award.
     * @example
     * // Update one Player_Award
     * const player_Award = await prisma.player_Award.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Player_AwardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardUpdateArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Player_Awards.
     * @param {Player_AwardDeleteManyArgs} args - Arguments to filter Player_Awards to delete.
     * @example
     * // Delete a few Player_Awards
     * const { count } = await prisma.player_Award.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Player_AwardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Player_AwardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Player_Awards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Player_Awards
     * const player_Award = await prisma.player_Award.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Player_AwardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player_Award.
     * @param {Player_AwardUpsertArgs} args - Arguments to update or create a Player_Award.
     * @example
     * // Update or create a Player_Award
     * const player_Award = await prisma.player_Award.upsert({
     *   create: {
     *     // ... data to create a Player_Award
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player_Award we want to update
     *   }
     * })
    **/
    upsert<T extends Player_AwardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Player_AwardUpsertArgs<ExtArgs>>
    ): Prisma__Player_AwardClient<$Result.GetResult<Prisma.$Player_AwardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Player_Awards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardCountArgs} args - Arguments to filter Player_Awards to count.
     * @example
     * // Count the number of Player_Awards
     * const count = await prisma.player_Award.count({
     *   where: {
     *     // ... the filter for the Player_Awards we want to count
     *   }
     * })
    **/
    count<T extends Player_AwardCountArgs>(
      args?: Subset<T, Player_AwardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Player_AwardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player_Award.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Player_AwardAggregateArgs>(args: Subset<T, Player_AwardAggregateArgs>): Prisma.PrismaPromise<GetPlayer_AwardAggregateType<T>>

    /**
     * Group by Player_Award.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Player_AwardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Player_AwardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Player_AwardGroupByArgs['orderBy'] }
        : { orderBy?: Player_AwardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Player_AwardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayer_AwardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player_Award model
   */
  readonly fields: Player_AwardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player_Award.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Player_AwardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Player_Award model
   */ 
  interface Player_AwardFieldRefs {
    readonly id: FieldRef<"Player_Award", 'Int'>
    readonly playerId: FieldRef<"Player_Award", 'Int'>
    readonly award_name: FieldRef<"Player_Award", 'String'>
    readonly year_awarded: FieldRef<"Player_Award", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Player_Award findUnique
   */
  export type Player_AwardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter, which Player_Award to fetch.
     */
    where: Player_AwardWhereUniqueInput
  }


  /**
   * Player_Award findUniqueOrThrow
   */
  export type Player_AwardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter, which Player_Award to fetch.
     */
    where: Player_AwardWhereUniqueInput
  }


  /**
   * Player_Award findFirst
   */
  export type Player_AwardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter, which Player_Award to fetch.
     */
    where?: Player_AwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Player_Awards to fetch.
     */
    orderBy?: Player_AwardOrderByWithRelationInput | Player_AwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Player_Awards.
     */
    cursor?: Player_AwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Player_Awards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Player_Awards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Player_Awards.
     */
    distinct?: Player_AwardScalarFieldEnum | Player_AwardScalarFieldEnum[]
  }


  /**
   * Player_Award findFirstOrThrow
   */
  export type Player_AwardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter, which Player_Award to fetch.
     */
    where?: Player_AwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Player_Awards to fetch.
     */
    orderBy?: Player_AwardOrderByWithRelationInput | Player_AwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Player_Awards.
     */
    cursor?: Player_AwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Player_Awards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Player_Awards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Player_Awards.
     */
    distinct?: Player_AwardScalarFieldEnum | Player_AwardScalarFieldEnum[]
  }


  /**
   * Player_Award findMany
   */
  export type Player_AwardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter, which Player_Awards to fetch.
     */
    where?: Player_AwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Player_Awards to fetch.
     */
    orderBy?: Player_AwardOrderByWithRelationInput | Player_AwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Player_Awards.
     */
    cursor?: Player_AwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Player_Awards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Player_Awards.
     */
    skip?: number
    distinct?: Player_AwardScalarFieldEnum | Player_AwardScalarFieldEnum[]
  }


  /**
   * Player_Award create
   */
  export type Player_AwardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * The data needed to create a Player_Award.
     */
    data: XOR<Player_AwardCreateInput, Player_AwardUncheckedCreateInput>
  }


  /**
   * Player_Award createMany
   */
  export type Player_AwardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Player_Awards.
     */
    data: Player_AwardCreateManyInput | Player_AwardCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Player_Award update
   */
  export type Player_AwardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * The data needed to update a Player_Award.
     */
    data: XOR<Player_AwardUpdateInput, Player_AwardUncheckedUpdateInput>
    /**
     * Choose, which Player_Award to update.
     */
    where: Player_AwardWhereUniqueInput
  }


  /**
   * Player_Award updateMany
   */
  export type Player_AwardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Player_Awards.
     */
    data: XOR<Player_AwardUpdateManyMutationInput, Player_AwardUncheckedUpdateManyInput>
    /**
     * Filter which Player_Awards to update
     */
    where?: Player_AwardWhereInput
  }


  /**
   * Player_Award upsert
   */
  export type Player_AwardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * The filter to search for the Player_Award to update in case it exists.
     */
    where: Player_AwardWhereUniqueInput
    /**
     * In case the Player_Award found by the `where` argument doesn't exist, create a new Player_Award with this data.
     */
    create: XOR<Player_AwardCreateInput, Player_AwardUncheckedCreateInput>
    /**
     * In case the Player_Award was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Player_AwardUpdateInput, Player_AwardUncheckedUpdateInput>
  }


  /**
   * Player_Award delete
   */
  export type Player_AwardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
    /**
     * Filter which Player_Award to delete.
     */
    where: Player_AwardWhereUniqueInput
  }


  /**
   * Player_Award deleteMany
   */
  export type Player_AwardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player_Awards to delete
     */
    where?: Player_AwardWhereInput
  }


  /**
   * Player_Award without action
   */
  export type Player_AwardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player_Award
     */
    select?: Player_AwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Player_AwardInclude<ExtArgs> | null
  }



  /**
   * Model Post_Season_Result
   */

  export type AggregatePost_Season_Result = {
    _count: Post_Season_ResultCountAggregateOutputType | null
    _avg: Post_Season_ResultAvgAggregateOutputType | null
    _sum: Post_Season_ResultSumAggregateOutputType | null
    _min: Post_Season_ResultMinAggregateOutputType | null
    _max: Post_Season_ResultMaxAggregateOutputType | null
  }

  export type Post_Season_ResultAvgAggregateOutputType = {
    id: number | null
    playoff_year: number | null
    opponent_score: number | null
    team_score: number | null
    teamId: number | null
  }

  export type Post_Season_ResultSumAggregateOutputType = {
    id: number | null
    playoff_year: number | null
    opponent_score: number | null
    team_score: number | null
    teamId: number | null
  }

  export type Post_Season_ResultMinAggregateOutputType = {
    id: number | null
    playoff_year: number | null
    last_round_reached: string | null
    win_lose: string | null
    opponent_score: number | null
    team_score: number | null
    teamId: number | null
  }

  export type Post_Season_ResultMaxAggregateOutputType = {
    id: number | null
    playoff_year: number | null
    last_round_reached: string | null
    win_lose: string | null
    opponent_score: number | null
    team_score: number | null
    teamId: number | null
  }

  export type Post_Season_ResultCountAggregateOutputType = {
    id: number
    playoff_year: number
    last_round_reached: number
    win_lose: number
    opponent_score: number
    team_score: number
    teamId: number
    _all: number
  }


  export type Post_Season_ResultAvgAggregateInputType = {
    id?: true
    playoff_year?: true
    opponent_score?: true
    team_score?: true
    teamId?: true
  }

  export type Post_Season_ResultSumAggregateInputType = {
    id?: true
    playoff_year?: true
    opponent_score?: true
    team_score?: true
    teamId?: true
  }

  export type Post_Season_ResultMinAggregateInputType = {
    id?: true
    playoff_year?: true
    last_round_reached?: true
    win_lose?: true
    opponent_score?: true
    team_score?: true
    teamId?: true
  }

  export type Post_Season_ResultMaxAggregateInputType = {
    id?: true
    playoff_year?: true
    last_round_reached?: true
    win_lose?: true
    opponent_score?: true
    team_score?: true
    teamId?: true
  }

  export type Post_Season_ResultCountAggregateInputType = {
    id?: true
    playoff_year?: true
    last_round_reached?: true
    win_lose?: true
    opponent_score?: true
    team_score?: true
    teamId?: true
    _all?: true
  }

  export type Post_Season_ResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post_Season_Result to aggregate.
     */
    where?: Post_Season_ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Season_Results to fetch.
     */
    orderBy?: Post_Season_ResultOrderByWithRelationInput | Post_Season_ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Post_Season_ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Season_Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Season_Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Post_Season_Results
    **/
    _count?: true | Post_Season_ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_Season_ResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_Season_ResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_Season_ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_Season_ResultMaxAggregateInputType
  }

  export type GetPost_Season_ResultAggregateType<T extends Post_Season_ResultAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_Season_Result]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_Season_Result[P]>
      : GetScalarType<T[P], AggregatePost_Season_Result[P]>
  }




  export type Post_Season_ResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Post_Season_ResultWhereInput
    orderBy?: Post_Season_ResultOrderByWithAggregationInput | Post_Season_ResultOrderByWithAggregationInput[]
    by: Post_Season_ResultScalarFieldEnum[] | Post_Season_ResultScalarFieldEnum
    having?: Post_Season_ResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_Season_ResultCountAggregateInputType | true
    _avg?: Post_Season_ResultAvgAggregateInputType
    _sum?: Post_Season_ResultSumAggregateInputType
    _min?: Post_Season_ResultMinAggregateInputType
    _max?: Post_Season_ResultMaxAggregateInputType
  }

  export type Post_Season_ResultGroupByOutputType = {
    id: number
    playoff_year: number
    last_round_reached: string | null
    win_lose: string | null
    opponent_score: number | null
    team_score: number | null
    teamId: number | null
    _count: Post_Season_ResultCountAggregateOutputType | null
    _avg: Post_Season_ResultAvgAggregateOutputType | null
    _sum: Post_Season_ResultSumAggregateOutputType | null
    _min: Post_Season_ResultMinAggregateOutputType | null
    _max: Post_Season_ResultMaxAggregateOutputType | null
  }

  type GetPost_Season_ResultGroupByPayload<T extends Post_Season_ResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_Season_ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_Season_ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_Season_ResultGroupByOutputType[P]>
            : GetScalarType<T[P], Post_Season_ResultGroupByOutputType[P]>
        }
      >
    >


  export type Post_Season_ResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playoff_year?: boolean
    last_round_reached?: boolean
    win_lose?: boolean
    opponent_score?: boolean
    team_score?: boolean
    teamId?: boolean
    Team?: boolean | Post_Season_Result$TeamArgs<ExtArgs>
  }, ExtArgs["result"]["post_Season_Result"]>

  export type Post_Season_ResultSelectScalar = {
    id?: boolean
    playoff_year?: boolean
    last_round_reached?: boolean
    win_lose?: boolean
    opponent_score?: boolean
    team_score?: boolean
    teamId?: boolean
  }

  export type Post_Season_ResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team?: boolean | Post_Season_Result$TeamArgs<ExtArgs>
  }


  export type $Post_Season_ResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post_Season_Result"
    objects: {
      Team: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playoff_year: number
      last_round_reached: string | null
      win_lose: string | null
      opponent_score: number | null
      team_score: number | null
      teamId: number | null
    }, ExtArgs["result"]["post_Season_Result"]>
    composites: {}
  }


  type Post_Season_ResultGetPayload<S extends boolean | null | undefined | Post_Season_ResultDefaultArgs> = $Result.GetResult<Prisma.$Post_Season_ResultPayload, S>

  type Post_Season_ResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Post_Season_ResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Post_Season_ResultCountAggregateInputType | true
    }

  export interface Post_Season_ResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post_Season_Result'], meta: { name: 'Post_Season_Result' } }
    /**
     * Find zero or one Post_Season_Result that matches the filter.
     * @param {Post_Season_ResultFindUniqueArgs} args - Arguments to find a Post_Season_Result
     * @example
     * // Get one Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Post_Season_ResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultFindUniqueArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Post_Season_Result that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Post_Season_ResultFindUniqueOrThrowArgs} args - Arguments to find a Post_Season_Result
     * @example
     * // Get one Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Post_Season_ResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Post_Season_Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultFindFirstArgs} args - Arguments to find a Post_Season_Result
     * @example
     * // Get one Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Post_Season_ResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultFindFirstArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Post_Season_Result that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultFindFirstOrThrowArgs} args - Arguments to find a Post_Season_Result
     * @example
     * // Get one Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Post_Season_ResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Post_Season_Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_Season_Results
     * const post_Season_Results = await prisma.post_Season_Result.findMany()
     * 
     * // Get first 10 Post_Season_Results
     * const post_Season_Results = await prisma.post_Season_Result.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const post_Season_ResultWithIdOnly = await prisma.post_Season_Result.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Post_Season_ResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Post_Season_Result.
     * @param {Post_Season_ResultCreateArgs} args - Arguments to create a Post_Season_Result.
     * @example
     * // Create one Post_Season_Result
     * const Post_Season_Result = await prisma.post_Season_Result.create({
     *   data: {
     *     // ... data to create a Post_Season_Result
     *   }
     * })
     * 
    **/
    create<T extends Post_Season_ResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultCreateArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Post_Season_Results.
     *     @param {Post_Season_ResultCreateManyArgs} args - Arguments to create many Post_Season_Results.
     *     @example
     *     // Create many Post_Season_Results
     *     const post_Season_Result = await prisma.post_Season_Result.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Post_Season_ResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post_Season_Result.
     * @param {Post_Season_ResultDeleteArgs} args - Arguments to delete one Post_Season_Result.
     * @example
     * // Delete one Post_Season_Result
     * const Post_Season_Result = await prisma.post_Season_Result.delete({
     *   where: {
     *     // ... filter to delete one Post_Season_Result
     *   }
     * })
     * 
    **/
    delete<T extends Post_Season_ResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultDeleteArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Post_Season_Result.
     * @param {Post_Season_ResultUpdateArgs} args - Arguments to update one Post_Season_Result.
     * @example
     * // Update one Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Post_Season_ResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultUpdateArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Post_Season_Results.
     * @param {Post_Season_ResultDeleteManyArgs} args - Arguments to filter Post_Season_Results to delete.
     * @example
     * // Delete a few Post_Season_Results
     * const { count } = await prisma.post_Season_Result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Post_Season_ResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Post_Season_ResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_Season_Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_Season_Results
     * const post_Season_Result = await prisma.post_Season_Result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Post_Season_ResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post_Season_Result.
     * @param {Post_Season_ResultUpsertArgs} args - Arguments to update or create a Post_Season_Result.
     * @example
     * // Update or create a Post_Season_Result
     * const post_Season_Result = await prisma.post_Season_Result.upsert({
     *   create: {
     *     // ... data to create a Post_Season_Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_Season_Result we want to update
     *   }
     * })
    **/
    upsert<T extends Post_Season_ResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Post_Season_ResultUpsertArgs<ExtArgs>>
    ): Prisma__Post_Season_ResultClient<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Post_Season_Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultCountArgs} args - Arguments to filter Post_Season_Results to count.
     * @example
     * // Count the number of Post_Season_Results
     * const count = await prisma.post_Season_Result.count({
     *   where: {
     *     // ... the filter for the Post_Season_Results we want to count
     *   }
     * })
    **/
    count<T extends Post_Season_ResultCountArgs>(
      args?: Subset<T, Post_Season_ResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_Season_ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_Season_Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_Season_ResultAggregateArgs>(args: Subset<T, Post_Season_ResultAggregateArgs>): Prisma.PrismaPromise<GetPost_Season_ResultAggregateType<T>>

    /**
     * Group by Post_Season_Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_Season_ResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Post_Season_ResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Post_Season_ResultGroupByArgs['orderBy'] }
        : { orderBy?: Post_Season_ResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Post_Season_ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_Season_ResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post_Season_Result model
   */
  readonly fields: Post_Season_ResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post_Season_Result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Post_Season_ResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Team<T extends Post_Season_Result$TeamArgs<ExtArgs> = {}>(args?: Subset<T, Post_Season_Result$TeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Post_Season_Result model
   */ 
  interface Post_Season_ResultFieldRefs {
    readonly id: FieldRef<"Post_Season_Result", 'Int'>
    readonly playoff_year: FieldRef<"Post_Season_Result", 'Int'>
    readonly last_round_reached: FieldRef<"Post_Season_Result", 'String'>
    readonly win_lose: FieldRef<"Post_Season_Result", 'String'>
    readonly opponent_score: FieldRef<"Post_Season_Result", 'Int'>
    readonly team_score: FieldRef<"Post_Season_Result", 'Int'>
    readonly teamId: FieldRef<"Post_Season_Result", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Post_Season_Result findUnique
   */
  export type Post_Season_ResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter, which Post_Season_Result to fetch.
     */
    where: Post_Season_ResultWhereUniqueInput
  }


  /**
   * Post_Season_Result findUniqueOrThrow
   */
  export type Post_Season_ResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter, which Post_Season_Result to fetch.
     */
    where: Post_Season_ResultWhereUniqueInput
  }


  /**
   * Post_Season_Result findFirst
   */
  export type Post_Season_ResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter, which Post_Season_Result to fetch.
     */
    where?: Post_Season_ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Season_Results to fetch.
     */
    orderBy?: Post_Season_ResultOrderByWithRelationInput | Post_Season_ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Post_Season_Results.
     */
    cursor?: Post_Season_ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Season_Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Season_Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Post_Season_Results.
     */
    distinct?: Post_Season_ResultScalarFieldEnum | Post_Season_ResultScalarFieldEnum[]
  }


  /**
   * Post_Season_Result findFirstOrThrow
   */
  export type Post_Season_ResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter, which Post_Season_Result to fetch.
     */
    where?: Post_Season_ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Season_Results to fetch.
     */
    orderBy?: Post_Season_ResultOrderByWithRelationInput | Post_Season_ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Post_Season_Results.
     */
    cursor?: Post_Season_ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Season_Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Season_Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Post_Season_Results.
     */
    distinct?: Post_Season_ResultScalarFieldEnum | Post_Season_ResultScalarFieldEnum[]
  }


  /**
   * Post_Season_Result findMany
   */
  export type Post_Season_ResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter, which Post_Season_Results to fetch.
     */
    where?: Post_Season_ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Season_Results to fetch.
     */
    orderBy?: Post_Season_ResultOrderByWithRelationInput | Post_Season_ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Post_Season_Results.
     */
    cursor?: Post_Season_ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Season_Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Season_Results.
     */
    skip?: number
    distinct?: Post_Season_ResultScalarFieldEnum | Post_Season_ResultScalarFieldEnum[]
  }


  /**
   * Post_Season_Result create
   */
  export type Post_Season_ResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * The data needed to create a Post_Season_Result.
     */
    data: XOR<Post_Season_ResultCreateInput, Post_Season_ResultUncheckedCreateInput>
  }


  /**
   * Post_Season_Result createMany
   */
  export type Post_Season_ResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Post_Season_Results.
     */
    data: Post_Season_ResultCreateManyInput | Post_Season_ResultCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Post_Season_Result update
   */
  export type Post_Season_ResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * The data needed to update a Post_Season_Result.
     */
    data: XOR<Post_Season_ResultUpdateInput, Post_Season_ResultUncheckedUpdateInput>
    /**
     * Choose, which Post_Season_Result to update.
     */
    where: Post_Season_ResultWhereUniqueInput
  }


  /**
   * Post_Season_Result updateMany
   */
  export type Post_Season_ResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Post_Season_Results.
     */
    data: XOR<Post_Season_ResultUpdateManyMutationInput, Post_Season_ResultUncheckedUpdateManyInput>
    /**
     * Filter which Post_Season_Results to update
     */
    where?: Post_Season_ResultWhereInput
  }


  /**
   * Post_Season_Result upsert
   */
  export type Post_Season_ResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * The filter to search for the Post_Season_Result to update in case it exists.
     */
    where: Post_Season_ResultWhereUniqueInput
    /**
     * In case the Post_Season_Result found by the `where` argument doesn't exist, create a new Post_Season_Result with this data.
     */
    create: XOR<Post_Season_ResultCreateInput, Post_Season_ResultUncheckedCreateInput>
    /**
     * In case the Post_Season_Result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Post_Season_ResultUpdateInput, Post_Season_ResultUncheckedUpdateInput>
  }


  /**
   * Post_Season_Result delete
   */
  export type Post_Season_ResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    /**
     * Filter which Post_Season_Result to delete.
     */
    where: Post_Season_ResultWhereUniqueInput
  }


  /**
   * Post_Season_Result deleteMany
   */
  export type Post_Season_ResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post_Season_Results to delete
     */
    where?: Post_Season_ResultWhereInput
  }


  /**
   * Post_Season_Result.Team
   */
  export type Post_Season_Result$TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }


  /**
   * Post_Season_Result without action
   */
  export type Post_Season_ResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
  }



  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    opponentId: number | null
    homeTeamId: number | null
    scheduleWeek: number | null
    opponentScore: number | null
    homeScore: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    opponentId: number | null
    homeTeamId: number | null
    scheduleWeek: number | null
    opponentScore: number | null
    homeScore: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    opponentId: number | null
    homeTeamId: number | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    opponentConference: string | null
    opponentDivision: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    opponentScore: number | null
    homeScore: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    opponentId: number | null
    homeTeamId: number | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    opponentConference: string | null
    opponentDivision: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    opponentScore: number | null
    homeScore: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    opponentId: number
    homeTeamId: number
    scheduleWeek: number
    gameDate: number
    gameCity: number
    gameStateProvince: number
    gameCountry: number
    gameLocation: number
    opponentConference: number
    opponentDivision: number
    wonLostFlag: number
    homeOrAway: number
    opponentScore: number
    homeScore: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    opponentId?: true
    homeTeamId?: true
    scheduleWeek?: true
    opponentScore?: true
    homeScore?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    opponentId?: true
    homeTeamId?: true
    scheduleWeek?: true
    opponentScore?: true
    homeScore?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    opponentId?: true
    homeTeamId?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    opponentConference?: true
    opponentDivision?: true
    wonLostFlag?: true
    homeOrAway?: true
    opponentScore?: true
    homeScore?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    opponentId?: true
    homeTeamId?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    opponentConference?: true
    opponentDivision?: true
    wonLostFlag?: true
    homeOrAway?: true
    opponentScore?: true
    homeScore?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    opponentId?: true
    homeTeamId?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    opponentConference?: true
    opponentDivision?: true
    wonLostFlag?: true
    homeOrAway?: true
    opponentScore?: true
    homeScore?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    opponentId: number
    homeTeamId: number | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    opponentConference: string | null
    opponentDivision: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    opponentScore: number | null
    homeScore: number | null
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    opponentId?: boolean
    homeTeamId?: boolean
    scheduleWeek?: boolean
    gameDate?: boolean
    gameCity?: boolean
    gameStateProvince?: boolean
    gameCountry?: boolean
    gameLocation?: boolean
    opponentConference?: boolean
    opponentDivision?: boolean
    wonLostFlag?: boolean
    homeOrAway?: boolean
    opponentScore?: boolean
    homeScore?: boolean
    Team_Schedule_homeTeamIdToTeam?: boolean | Schedule$Team_Schedule_homeTeamIdToTeamArgs<ExtArgs>
    Team_Schedule_opponentIdToTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    opponentId?: boolean
    homeTeamId?: boolean
    scheduleWeek?: boolean
    gameDate?: boolean
    gameCity?: boolean
    gameStateProvince?: boolean
    gameCountry?: boolean
    gameLocation?: boolean
    opponentConference?: boolean
    opponentDivision?: boolean
    wonLostFlag?: boolean
    homeOrAway?: boolean
    opponentScore?: boolean
    homeScore?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team_Schedule_homeTeamIdToTeam?: boolean | Schedule$Team_Schedule_homeTeamIdToTeamArgs<ExtArgs>
    Team_Schedule_opponentIdToTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }


  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      Team_Schedule_homeTeamIdToTeam: Prisma.$TeamPayload<ExtArgs> | null
      Team_Schedule_opponentIdToTeam: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      opponentId: number
      homeTeamId: number | null
      scheduleWeek: number | null
      gameDate: Date | null
      gameCity: string | null
      gameStateProvince: string | null
      gameCountry: string | null
      gameLocation: string | null
      opponentConference: string | null
      opponentDivision: string | null
      wonLostFlag: string | null
      homeOrAway: string | null
      opponentScore: number | null
      homeScore: number | null
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }


  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
    **/
    create<T extends ScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schedules.
     *     @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     *     @example
     *     // Create many Schedules
     *     const schedule = await prisma.schedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
    **/
    delete<T extends ScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
    **/
    upsert<T extends ScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>
    ): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Team_Schedule_homeTeamIdToTeam<T extends Schedule$Team_Schedule_homeTeamIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$Team_Schedule_homeTeamIdToTeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Team_Schedule_opponentIdToTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly opponentId: FieldRef<"Schedule", 'Int'>
    readonly homeTeamId: FieldRef<"Schedule", 'Int'>
    readonly scheduleWeek: FieldRef<"Schedule", 'Int'>
    readonly gameDate: FieldRef<"Schedule", 'DateTime'>
    readonly gameCity: FieldRef<"Schedule", 'String'>
    readonly gameStateProvince: FieldRef<"Schedule", 'String'>
    readonly gameCountry: FieldRef<"Schedule", 'String'>
    readonly gameLocation: FieldRef<"Schedule", 'String'>
    readonly opponentConference: FieldRef<"Schedule", 'String'>
    readonly opponentDivision: FieldRef<"Schedule", 'String'>
    readonly wonLostFlag: FieldRef<"Schedule", 'String'>
    readonly homeOrAway: FieldRef<"Schedule", 'String'>
    readonly opponentScore: FieldRef<"Schedule", 'Int'>
    readonly homeScore: FieldRef<"Schedule", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }


  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }


  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }


  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }


  /**
   * Schedule.Team_Schedule_homeTeamIdToTeam
   */
  export type Schedule$Team_Schedule_homeTeamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }


  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
  }



  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    state: string | null
    conference: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    state: string | null
    conference: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    city: number
    state: number
    conference: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    city: string | null
    state: string | null
    conference: string | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    city?: boolean
    state?: boolean
    conference?: boolean
    Pick?: boolean | Team$PickArgs<ExtArgs>
    Player?: boolean | Team$PlayerArgs<ExtArgs>
    Post_Season_Result?: boolean | Team$Post_Season_ResultArgs<ExtArgs>
    Schedule_Schedule_homeTeamIdToTeam?: boolean | Team$Schedule_Schedule_homeTeamIdToTeamArgs<ExtArgs>
    Schedule_Schedule_opponentIdToTeam?: boolean | Team$Schedule_Schedule_opponentIdToTeamArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    city?: boolean
    state?: boolean
    conference?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pick?: boolean | Team$PickArgs<ExtArgs>
    Player?: boolean | Team$PlayerArgs<ExtArgs>
    Post_Season_Result?: boolean | Team$Post_Season_ResultArgs<ExtArgs>
    Schedule_Schedule_homeTeamIdToTeam?: boolean | Team$Schedule_Schedule_homeTeamIdToTeamArgs<ExtArgs>
    Schedule_Schedule_opponentIdToTeam?: boolean | Team$Schedule_Schedule_opponentIdToTeamArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      Pick: Prisma.$PickPayload<ExtArgs>[]
      Player: Prisma.$PlayerPayload<ExtArgs>[]
      Post_Season_Result: Prisma.$Post_Season_ResultPayload<ExtArgs>[]
      Schedule_Schedule_homeTeamIdToTeam: Prisma.$SchedulePayload<ExtArgs>[]
      Schedule_Schedule_opponentIdToTeam: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      city: string | null
      state: string | null
      conference: string | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }


  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamCreateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pick<T extends Team$PickArgs<ExtArgs> = {}>(args?: Subset<T, Team$PickArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, 'findMany'> | Null>;

    Player<T extends Team$PlayerArgs<ExtArgs> = {}>(args?: Subset<T, Team$PlayerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    Post_Season_Result<T extends Team$Post_Season_ResultArgs<ExtArgs> = {}>(args?: Subset<T, Team$Post_Season_ResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Post_Season_ResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    Schedule_Schedule_homeTeamIdToTeam<T extends Team$Schedule_Schedule_homeTeamIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Team$Schedule_Schedule_homeTeamIdToTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    Schedule_Schedule_opponentIdToTeam<T extends Team$Schedule_Schedule_opponentIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Team$Schedule_Schedule_opponentIdToTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly city: FieldRef<"Team", 'String'>
    readonly state: FieldRef<"Team", 'String'>
    readonly conference: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }


  /**
   * Team.Pick
   */
  export type Team$PickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }


  /**
   * Team.Player
   */
  export type Team$PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }


  /**
   * Team.Post_Season_Result
   */
  export type Team$Post_Season_ResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post_Season_Result
     */
    select?: Post_Season_ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_Season_ResultInclude<ExtArgs> | null
    where?: Post_Season_ResultWhereInput
    orderBy?: Post_Season_ResultOrderByWithRelationInput | Post_Season_ResultOrderByWithRelationInput[]
    cursor?: Post_Season_ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_Season_ResultScalarFieldEnum | Post_Season_ResultScalarFieldEnum[]
  }


  /**
   * Team.Schedule_Schedule_homeTeamIdToTeam
   */
  export type Team$Schedule_Schedule_homeTeamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Team.Schedule_Schedule_opponentIdToTeam
   */
  export type Team$Schedule_Schedule_opponentIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }


  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Combine_ScoreScalarFieldEnum: {
    id: 'id',
    fortyTime: 'fortyTime',
    tenYardSplit: 'tenYardSplit',
    twentyYardShuttle: 'twentyYardShuttle',
    threeCone: 'threeCone',
    verticalLeap: 'verticalLeap',
    playerId: 'playerId',
    broadJump: 'broadJump'
  };

  export type Combine_ScoreScalarFieldEnum = (typeof Combine_ScoreScalarFieldEnum)[keyof typeof Combine_ScoreScalarFieldEnum]


  export const PickScalarFieldEnum: {
    id: 'id',
    selectionRound: 'selectionRound',
    selectionNumber: 'selectionNumber',
    selectionYear: 'selectionYear',
    selectionPickFrom: 'selectionPickFrom',
    selectionPickTo: 'selectionPickTo',
    combineScore: 'combineScore',
    Team_id: 'Team_id',
    Player_id: 'Player_id'
  };

  export type PickScalarFieldEnum = (typeof PickScalarFieldEnum)[keyof typeof PickScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    age: 'age',
    height: 'height',
    weight: 'weight',
    handSize: 'handSize',
    armLength: 'armLength',
    homeCity: 'homeCity',
    homeState: 'homeState',
    university: 'university',
    status: 'status',
    position: 'position',
    teamId: 'teamId',
    year_entered_league: 'year_entered_league'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const Player_AwardScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    award_name: 'award_name',
    year_awarded: 'year_awarded'
  };

  export type Player_AwardScalarFieldEnum = (typeof Player_AwardScalarFieldEnum)[keyof typeof Player_AwardScalarFieldEnum]


  export const Post_Season_ResultScalarFieldEnum: {
    id: 'id',
    playoff_year: 'playoff_year',
    last_round_reached: 'last_round_reached',
    win_lose: 'win_lose',
    opponent_score: 'opponent_score',
    team_score: 'team_score',
    teamId: 'teamId'
  };

  export type Post_Season_ResultScalarFieldEnum = (typeof Post_Season_ResultScalarFieldEnum)[keyof typeof Post_Season_ResultScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    opponentId: 'opponentId',
    homeTeamId: 'homeTeamId',
    scheduleWeek: 'scheduleWeek',
    gameDate: 'gameDate',
    gameCity: 'gameCity',
    gameStateProvince: 'gameStateProvince',
    gameCountry: 'gameCountry',
    gameLocation: 'gameLocation',
    opponentConference: 'opponentConference',
    opponentDivision: 'opponentDivision',
    wonLostFlag: 'wonLostFlag',
    homeOrAway: 'homeOrAway',
    opponentScore: 'opponentScore',
    homeScore: 'homeScore'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    city: 'city',
    state: 'state',
    conference: 'conference'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type Combine_ScoreWhereInput = {
    AND?: Combine_ScoreWhereInput | Combine_ScoreWhereInput[]
    OR?: Combine_ScoreWhereInput[]
    NOT?: Combine_ScoreWhereInput | Combine_ScoreWhereInput[]
    id?: IntFilter<"Combine_Score"> | number
    fortyTime?: FloatNullableFilter<"Combine_Score"> | number | null
    tenYardSplit?: FloatNullableFilter<"Combine_Score"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Combine_Score"> | number | null
    threeCone?: FloatNullableFilter<"Combine_Score"> | number | null
    verticalLeap?: FloatNullableFilter<"Combine_Score"> | number | null
    playerId?: IntNullableFilter<"Combine_Score"> | number | null
    broadJump?: FloatNullableFilter<"Combine_Score"> | number | null
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
  }

  export type Combine_ScoreOrderByWithRelationInput = {
    id?: SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    Player?: PlayerOrderByWithRelationInput
  }

  export type Combine_ScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Combine_ScoreWhereInput | Combine_ScoreWhereInput[]
    OR?: Combine_ScoreWhereInput[]
    NOT?: Combine_ScoreWhereInput | Combine_ScoreWhereInput[]
    fortyTime?: FloatNullableFilter<"Combine_Score"> | number | null
    tenYardSplit?: FloatNullableFilter<"Combine_Score"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Combine_Score"> | number | null
    threeCone?: FloatNullableFilter<"Combine_Score"> | number | null
    verticalLeap?: FloatNullableFilter<"Combine_Score"> | number | null
    playerId?: IntNullableFilter<"Combine_Score"> | number | null
    broadJump?: FloatNullableFilter<"Combine_Score"> | number | null
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
  }, "id">

  export type Combine_ScoreOrderByWithAggregationInput = {
    id?: SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    _count?: Combine_ScoreCountOrderByAggregateInput
    _avg?: Combine_ScoreAvgOrderByAggregateInput
    _max?: Combine_ScoreMaxOrderByAggregateInput
    _min?: Combine_ScoreMinOrderByAggregateInput
    _sum?: Combine_ScoreSumOrderByAggregateInput
  }

  export type Combine_ScoreScalarWhereWithAggregatesInput = {
    AND?: Combine_ScoreScalarWhereWithAggregatesInput | Combine_ScoreScalarWhereWithAggregatesInput[]
    OR?: Combine_ScoreScalarWhereWithAggregatesInput[]
    NOT?: Combine_ScoreScalarWhereWithAggregatesInput | Combine_ScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Combine_Score"> | number
    fortyTime?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
    tenYardSplit?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
    twentyYardShuttle?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
    threeCone?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
    verticalLeap?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
    playerId?: IntNullableWithAggregatesFilter<"Combine_Score"> | number | null
    broadJump?: FloatNullableWithAggregatesFilter<"Combine_Score"> | number | null
  }

  export type PickWhereInput = {
    AND?: PickWhereInput | PickWhereInput[]
    OR?: PickWhereInput[]
    NOT?: PickWhereInput | PickWhereInput[]
    id?: IntFilter<"Pick"> | number
    selectionRound?: IntNullableFilter<"Pick"> | number | null
    selectionNumber?: IntNullableFilter<"Pick"> | number | null
    selectionYear?: StringNullableFilter<"Pick"> | string | null
    selectionPickFrom?: StringNullableFilter<"Pick"> | string | null
    selectionPickTo?: StringNullableFilter<"Pick"> | string | null
    combineScore?: IntNullableFilter<"Pick"> | number | null
    Team_id?: IntFilter<"Pick"> | number
    Player_id?: IntFilter<"Pick"> | number
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type PickOrderByWithRelationInput = {
    id?: SortOrder
    selectionRound?: SortOrderInput | SortOrder
    selectionNumber?: SortOrderInput | SortOrder
    selectionYear?: SortOrderInput | SortOrder
    selectionPickFrom?: SortOrderInput | SortOrder
    selectionPickTo?: SortOrderInput | SortOrder
    combineScore?: SortOrderInput | SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
    Player?: PlayerOrderByWithRelationInput
    Team?: TeamOrderByWithRelationInput
  }

  export type PickWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PickWhereInput | PickWhereInput[]
    OR?: PickWhereInput[]
    NOT?: PickWhereInput | PickWhereInput[]
    selectionRound?: IntNullableFilter<"Pick"> | number | null
    selectionNumber?: IntNullableFilter<"Pick"> | number | null
    selectionYear?: StringNullableFilter<"Pick"> | string | null
    selectionPickFrom?: StringNullableFilter<"Pick"> | string | null
    selectionPickTo?: StringNullableFilter<"Pick"> | string | null
    combineScore?: IntNullableFilter<"Pick"> | number | null
    Team_id?: IntFilter<"Pick"> | number
    Player_id?: IntFilter<"Pick"> | number
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type PickOrderByWithAggregationInput = {
    id?: SortOrder
    selectionRound?: SortOrderInput | SortOrder
    selectionNumber?: SortOrderInput | SortOrder
    selectionYear?: SortOrderInput | SortOrder
    selectionPickFrom?: SortOrderInput | SortOrder
    selectionPickTo?: SortOrderInput | SortOrder
    combineScore?: SortOrderInput | SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
    _count?: PickCountOrderByAggregateInput
    _avg?: PickAvgOrderByAggregateInput
    _max?: PickMaxOrderByAggregateInput
    _min?: PickMinOrderByAggregateInput
    _sum?: PickSumOrderByAggregateInput
  }

  export type PickScalarWhereWithAggregatesInput = {
    AND?: PickScalarWhereWithAggregatesInput | PickScalarWhereWithAggregatesInput[]
    OR?: PickScalarWhereWithAggregatesInput[]
    NOT?: PickScalarWhereWithAggregatesInput | PickScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pick"> | number
    selectionRound?: IntNullableWithAggregatesFilter<"Pick"> | number | null
    selectionNumber?: IntNullableWithAggregatesFilter<"Pick"> | number | null
    selectionYear?: StringNullableWithAggregatesFilter<"Pick"> | string | null
    selectionPickFrom?: StringNullableWithAggregatesFilter<"Pick"> | string | null
    selectionPickTo?: StringNullableWithAggregatesFilter<"Pick"> | string | null
    combineScore?: IntNullableWithAggregatesFilter<"Pick"> | number | null
    Team_id?: IntWithAggregatesFilter<"Pick"> | number
    Player_id?: IntWithAggregatesFilter<"Pick"> | number
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    teamId?: IntNullableFilter<"Player"> | number | null
    year_entered_league?: IntNullableFilter<"Player"> | number | null
    Combine_Score?: Combine_ScoreListRelationFilter
    Pick?: PickListRelationFilter
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Player_Award?: Player_AwardListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    year_entered_league?: SortOrderInput | SortOrder
    Combine_Score?: Combine_ScoreOrderByRelationAggregateInput
    Pick?: PickOrderByRelationAggregateInput
    Team?: TeamOrderByWithRelationInput
    Player_Award?: Player_AwardOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    teamId?: IntNullableFilter<"Player"> | number | null
    year_entered_league?: IntNullableFilter<"Player"> | number | null
    Combine_Score?: Combine_ScoreListRelationFilter
    Pick?: PickListRelationFilter
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Player_Award?: Player_AwardListRelationFilter
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    year_entered_league?: SortOrderInput | SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    firstName?: StringWithAggregatesFilter<"Player"> | string
    lastName?: StringWithAggregatesFilter<"Player"> | string
    age?: IntWithAggregatesFilter<"Player"> | number
    height?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    handSize?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    armLength?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    homeCity?: StringNullableWithAggregatesFilter<"Player"> | string | null
    homeState?: StringNullableWithAggregatesFilter<"Player"> | string | null
    university?: StringNullableWithAggregatesFilter<"Player"> | string | null
    status?: StringNullableWithAggregatesFilter<"Player"> | string | null
    position?: StringNullableWithAggregatesFilter<"Player"> | string | null
    teamId?: IntNullableWithAggregatesFilter<"Player"> | number | null
    year_entered_league?: IntNullableWithAggregatesFilter<"Player"> | number | null
  }

  export type Player_AwardWhereInput = {
    AND?: Player_AwardWhereInput | Player_AwardWhereInput[]
    OR?: Player_AwardWhereInput[]
    NOT?: Player_AwardWhereInput | Player_AwardWhereInput[]
    id?: IntFilter<"Player_Award"> | number
    playerId?: IntFilter<"Player_Award"> | number
    award_name?: StringNullableFilter<"Player_Award"> | string | null
    year_awarded?: IntNullableFilter<"Player_Award"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type Player_AwardOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    award_name?: SortOrderInput | SortOrder
    year_awarded?: SortOrderInput | SortOrder
    Player?: PlayerOrderByWithRelationInput
  }

  export type Player_AwardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Player_AwardWhereInput | Player_AwardWhereInput[]
    OR?: Player_AwardWhereInput[]
    NOT?: Player_AwardWhereInput | Player_AwardWhereInput[]
    playerId?: IntFilter<"Player_Award"> | number
    award_name?: StringNullableFilter<"Player_Award"> | string | null
    year_awarded?: IntNullableFilter<"Player_Award"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id">

  export type Player_AwardOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    award_name?: SortOrderInput | SortOrder
    year_awarded?: SortOrderInput | SortOrder
    _count?: Player_AwardCountOrderByAggregateInput
    _avg?: Player_AwardAvgOrderByAggregateInput
    _max?: Player_AwardMaxOrderByAggregateInput
    _min?: Player_AwardMinOrderByAggregateInput
    _sum?: Player_AwardSumOrderByAggregateInput
  }

  export type Player_AwardScalarWhereWithAggregatesInput = {
    AND?: Player_AwardScalarWhereWithAggregatesInput | Player_AwardScalarWhereWithAggregatesInput[]
    OR?: Player_AwardScalarWhereWithAggregatesInput[]
    NOT?: Player_AwardScalarWhereWithAggregatesInput | Player_AwardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player_Award"> | number
    playerId?: IntWithAggregatesFilter<"Player_Award"> | number
    award_name?: StringNullableWithAggregatesFilter<"Player_Award"> | string | null
    year_awarded?: IntNullableWithAggregatesFilter<"Player_Award"> | number | null
  }

  export type Post_Season_ResultWhereInput = {
    AND?: Post_Season_ResultWhereInput | Post_Season_ResultWhereInput[]
    OR?: Post_Season_ResultWhereInput[]
    NOT?: Post_Season_ResultWhereInput | Post_Season_ResultWhereInput[]
    id?: IntFilter<"Post_Season_Result"> | number
    playoff_year?: IntFilter<"Post_Season_Result"> | number
    last_round_reached?: StringNullableFilter<"Post_Season_Result"> | string | null
    win_lose?: StringNullableFilter<"Post_Season_Result"> | string | null
    opponent_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    team_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    teamId?: IntNullableFilter<"Post_Season_Result"> | number | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }

  export type Post_Season_ResultOrderByWithRelationInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    last_round_reached?: SortOrderInput | SortOrder
    win_lose?: SortOrderInput | SortOrder
    opponent_score?: SortOrderInput | SortOrder
    team_score?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    Team?: TeamOrderByWithRelationInput
  }

  export type Post_Season_ResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Post_Season_ResultWhereInput | Post_Season_ResultWhereInput[]
    OR?: Post_Season_ResultWhereInput[]
    NOT?: Post_Season_ResultWhereInput | Post_Season_ResultWhereInput[]
    playoff_year?: IntFilter<"Post_Season_Result"> | number
    last_round_reached?: StringNullableFilter<"Post_Season_Result"> | string | null
    win_lose?: StringNullableFilter<"Post_Season_Result"> | string | null
    opponent_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    team_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    teamId?: IntNullableFilter<"Post_Season_Result"> | number | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }, "id">

  export type Post_Season_ResultOrderByWithAggregationInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    last_round_reached?: SortOrderInput | SortOrder
    win_lose?: SortOrderInput | SortOrder
    opponent_score?: SortOrderInput | SortOrder
    team_score?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    _count?: Post_Season_ResultCountOrderByAggregateInput
    _avg?: Post_Season_ResultAvgOrderByAggregateInput
    _max?: Post_Season_ResultMaxOrderByAggregateInput
    _min?: Post_Season_ResultMinOrderByAggregateInput
    _sum?: Post_Season_ResultSumOrderByAggregateInput
  }

  export type Post_Season_ResultScalarWhereWithAggregatesInput = {
    AND?: Post_Season_ResultScalarWhereWithAggregatesInput | Post_Season_ResultScalarWhereWithAggregatesInput[]
    OR?: Post_Season_ResultScalarWhereWithAggregatesInput[]
    NOT?: Post_Season_ResultScalarWhereWithAggregatesInput | Post_Season_ResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post_Season_Result"> | number
    playoff_year?: IntWithAggregatesFilter<"Post_Season_Result"> | number
    last_round_reached?: StringNullableWithAggregatesFilter<"Post_Season_Result"> | string | null
    win_lose?: StringNullableWithAggregatesFilter<"Post_Season_Result"> | string | null
    opponent_score?: IntNullableWithAggregatesFilter<"Post_Season_Result"> | number | null
    team_score?: IntNullableWithAggregatesFilter<"Post_Season_Result"> | number | null
    teamId?: IntNullableWithAggregatesFilter<"Post_Season_Result"> | number | null
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    opponentId?: IntFilter<"Schedule"> | number
    homeTeamId?: IntNullableFilter<"Schedule"> | number | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    opponentConference?: StringNullableFilter<"Schedule"> | string | null
    opponentDivision?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    opponentScore?: IntNullableFilter<"Schedule"> | number | null
    homeScore?: IntNullableFilter<"Schedule"> | number | null
    Team_Schedule_homeTeamIdToTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Team_Schedule_opponentIdToTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrderInput | SortOrder
    scheduleWeek?: SortOrderInput | SortOrder
    gameDate?: SortOrderInput | SortOrder
    gameCity?: SortOrderInput | SortOrder
    gameStateProvince?: SortOrderInput | SortOrder
    gameCountry?: SortOrderInput | SortOrder
    gameLocation?: SortOrderInput | SortOrder
    opponentConference?: SortOrderInput | SortOrder
    opponentDivision?: SortOrderInput | SortOrder
    wonLostFlag?: SortOrderInput | SortOrder
    homeOrAway?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    homeScore?: SortOrderInput | SortOrder
    Team_Schedule_homeTeamIdToTeam?: TeamOrderByWithRelationInput
    Team_Schedule_opponentIdToTeam?: TeamOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    opponentId?: IntFilter<"Schedule"> | number
    homeTeamId?: IntNullableFilter<"Schedule"> | number | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    opponentConference?: StringNullableFilter<"Schedule"> | string | null
    opponentDivision?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    opponentScore?: IntNullableFilter<"Schedule"> | number | null
    homeScore?: IntNullableFilter<"Schedule"> | number | null
    Team_Schedule_homeTeamIdToTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Team_Schedule_opponentIdToTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrderInput | SortOrder
    scheduleWeek?: SortOrderInput | SortOrder
    gameDate?: SortOrderInput | SortOrder
    gameCity?: SortOrderInput | SortOrder
    gameStateProvince?: SortOrderInput | SortOrder
    gameCountry?: SortOrderInput | SortOrder
    gameLocation?: SortOrderInput | SortOrder
    opponentConference?: SortOrderInput | SortOrder
    opponentDivision?: SortOrderInput | SortOrder
    wonLostFlag?: SortOrderInput | SortOrder
    homeOrAway?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    homeScore?: SortOrderInput | SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    opponentId?: IntWithAggregatesFilter<"Schedule"> | number
    homeTeamId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    scheduleWeek?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableWithAggregatesFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameCountry?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameLocation?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    opponentConference?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    opponentDivision?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    opponentScore?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    homeScore?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    city?: StringNullableFilter<"Team"> | string | null
    state?: StringNullableFilter<"Team"> | string | null
    conference?: StringNullableFilter<"Team"> | string | null
    Pick?: PickListRelationFilter
    Player?: PlayerListRelationFilter
    Post_Season_Result?: Post_Season_ResultListRelationFilter
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleListRelationFilter
    Schedule_Schedule_opponentIdToTeam?: ScheduleListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    Pick?: PickOrderByRelationAggregateInput
    Player?: PlayerOrderByRelationAggregateInput
    Post_Season_Result?: Post_Season_ResultOrderByRelationAggregateInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleOrderByRelationAggregateInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    city?: StringNullableFilter<"Team"> | string | null
    state?: StringNullableFilter<"Team"> | string | null
    conference?: StringNullableFilter<"Team"> | string | null
    Pick?: PickListRelationFilter
    Player?: PlayerListRelationFilter
    Post_Season_Result?: Post_Season_ResultListRelationFilter
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleListRelationFilter
    Schedule_Schedule_opponentIdToTeam?: ScheduleListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    city?: StringNullableWithAggregatesFilter<"Team"> | string | null
    state?: StringNullableWithAggregatesFilter<"Team"> | string | null
    conference?: StringNullableWithAggregatesFilter<"Team"> | string | null
  }

  export type Combine_ScoreCreateInput = {
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    Player?: PlayerCreateNestedOneWithoutCombine_ScoreInput
  }

  export type Combine_ScoreUncheckedCreateInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    playerId?: number | null
    broadJump?: number | null
  }

  export type Combine_ScoreUpdateInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneWithoutCombine_ScoreNestedInput
  }

  export type Combine_ScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Combine_ScoreCreateManyInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    playerId?: number | null
    broadJump?: number | null
  }

  export type Combine_ScoreUpdateManyMutationInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Combine_ScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PickCreateInput = {
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Player: PlayerCreateNestedOneWithoutPickInput
    Team: TeamCreateNestedOneWithoutPickInput
  }

  export type PickUncheckedCreateInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Team_id: number
    Player_id: number
  }

  export type PickUpdateInput = {
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPickNestedInput
    Team?: TeamUpdateOneRequiredWithoutPickNestedInput
  }

  export type PickUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_id?: IntFieldUpdateOperationsInput | number
    Player_id?: IntFieldUpdateOperationsInput | number
  }

  export type PickCreateManyInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Team_id: number
    Player_id: number
  }

  export type PickUpdateManyMutationInput = {
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_id?: IntFieldUpdateOperationsInput | number
    Player_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerCreateInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreCreateNestedManyWithoutPlayerInput
    Pick?: PickCreateNestedManyWithoutPlayerInput
    Team?: TeamCreateNestedOneWithoutPlayerInput
    Player_Award?: Player_AwardCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    teamId?: number | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreUncheckedCreateNestedManyWithoutPlayerInput
    Pick?: PickUncheckedCreateNestedManyWithoutPlayerInput
    Player_Award?: Player_AwardUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUpdateManyWithoutPlayerNestedInput
    Pick?: PickUpdateManyWithoutPlayerNestedInput
    Team?: TeamUpdateOneWithoutPlayerNestedInput
    Player_Award?: Player_AwardUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUncheckedUpdateManyWithoutPlayerNestedInput
    Pick?: PickUncheckedUpdateManyWithoutPlayerNestedInput
    Player_Award?: Player_AwardUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    teamId?: number | null
    year_entered_league?: number | null
  }

  export type PlayerUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Player_AwardCreateInput = {
    award_name?: string | null
    year_awarded?: number | null
    Player: PlayerCreateNestedOneWithoutPlayer_AwardInput
  }

  export type Player_AwardUncheckedCreateInput = {
    id?: number
    playerId: number
    award_name?: string | null
    year_awarded?: number | null
  }

  export type Player_AwardUpdateInput = {
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPlayer_AwardNestedInput
  }

  export type Player_AwardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Player_AwardCreateManyInput = {
    id?: number
    playerId: number
    award_name?: string | null
    year_awarded?: number | null
  }

  export type Player_AwardUpdateManyMutationInput = {
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Player_AwardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultCreateInput = {
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
    Team?: TeamCreateNestedOneWithoutPost_Season_ResultInput
  }

  export type Post_Season_ResultUncheckedCreateInput = {
    id?: number
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
    teamId?: number | null
  }

  export type Post_Season_ResultUpdateInput = {
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneWithoutPost_Season_ResultNestedInput
  }

  export type Post_Season_ResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultCreateManyInput = {
    id?: number
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
    teamId?: number | null
  }

  export type Post_Season_ResultUpdateManyMutationInput = {
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleCreateInput = {
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
    Team_Schedule_homeTeamIdToTeam?: TeamCreateNestedOneWithoutSchedule_Schedule_homeTeamIdToTeamInput
    Team_Schedule_opponentIdToTeam: TeamCreateNestedOneWithoutSchedule_Schedule_opponentIdToTeamInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    opponentId: number
    homeTeamId?: number | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type ScheduleUpdateInput = {
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_homeTeamIdToTeam?: TeamUpdateOneWithoutSchedule_Schedule_homeTeamIdToTeamNestedInput
    Team_Schedule_opponentIdToTeam?: TeamUpdateOneRequiredWithoutSchedule_Schedule_opponentIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    opponentId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleCreateManyInput = {
    id?: number
    opponentId: number
    homeTeamId?: number | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type ScheduleUpdateManyMutationInput = {
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    opponentId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamCreateInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickCreateNestedManyWithoutTeamInput
    Player?: PlayerCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickUncheckedCreateNestedManyWithoutTeamInput
    Player?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUpdateManyWithoutTeamNestedInput
    Player?: PlayerUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUncheckedUpdateManyWithoutTeamNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PlayerNullableRelationFilter = {
    is?: PlayerWhereInput | null
    isNot?: PlayerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Combine_ScoreCountOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type Combine_ScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type Combine_ScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type Combine_ScoreMinOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type Combine_ScoreSumOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type PickCountOrderByAggregateInput = {
    id?: SortOrder
    selectionRound?: SortOrder
    selectionNumber?: SortOrder
    selectionYear?: SortOrder
    selectionPickFrom?: SortOrder
    selectionPickTo?: SortOrder
    combineScore?: SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
  }

  export type PickAvgOrderByAggregateInput = {
    id?: SortOrder
    selectionRound?: SortOrder
    selectionNumber?: SortOrder
    combineScore?: SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
  }

  export type PickMaxOrderByAggregateInput = {
    id?: SortOrder
    selectionRound?: SortOrder
    selectionNumber?: SortOrder
    selectionYear?: SortOrder
    selectionPickFrom?: SortOrder
    selectionPickTo?: SortOrder
    combineScore?: SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
  }

  export type PickMinOrderByAggregateInput = {
    id?: SortOrder
    selectionRound?: SortOrder
    selectionNumber?: SortOrder
    selectionYear?: SortOrder
    selectionPickFrom?: SortOrder
    selectionPickTo?: SortOrder
    combineScore?: SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
  }

  export type PickSumOrderByAggregateInput = {
    id?: SortOrder
    selectionRound?: SortOrder
    selectionNumber?: SortOrder
    combineScore?: SortOrder
    Team_id?: SortOrder
    Player_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Combine_ScoreListRelationFilter = {
    every?: Combine_ScoreWhereInput
    some?: Combine_ScoreWhereInput
    none?: Combine_ScoreWhereInput
  }

  export type PickListRelationFilter = {
    every?: PickWhereInput
    some?: PickWhereInput
    none?: PickWhereInput
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type Player_AwardListRelationFilter = {
    every?: Player_AwardWhereInput
    some?: Player_AwardWhereInput
    none?: Player_AwardWhereInput
  }

  export type Combine_ScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PickOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Player_AwardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
    year_entered_league?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    teamId?: SortOrder
    year_entered_league?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
    year_entered_league?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
    year_entered_league?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    teamId?: SortOrder
    year_entered_league?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Player_AwardCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    award_name?: SortOrder
    year_awarded?: SortOrder
  }

  export type Player_AwardAvgOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    year_awarded?: SortOrder
  }

  export type Player_AwardMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    award_name?: SortOrder
    year_awarded?: SortOrder
  }

  export type Player_AwardMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    award_name?: SortOrder
    year_awarded?: SortOrder
  }

  export type Player_AwardSumOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    year_awarded?: SortOrder
  }

  export type Post_Season_ResultCountOrderByAggregateInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    last_round_reached?: SortOrder
    win_lose?: SortOrder
    opponent_score?: SortOrder
    team_score?: SortOrder
    teamId?: SortOrder
  }

  export type Post_Season_ResultAvgOrderByAggregateInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    opponent_score?: SortOrder
    team_score?: SortOrder
    teamId?: SortOrder
  }

  export type Post_Season_ResultMaxOrderByAggregateInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    last_round_reached?: SortOrder
    win_lose?: SortOrder
    opponent_score?: SortOrder
    team_score?: SortOrder
    teamId?: SortOrder
  }

  export type Post_Season_ResultMinOrderByAggregateInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    last_round_reached?: SortOrder
    win_lose?: SortOrder
    opponent_score?: SortOrder
    team_score?: SortOrder
    teamId?: SortOrder
  }

  export type Post_Season_ResultSumOrderByAggregateInput = {
    id?: SortOrder
    playoff_year?: SortOrder
    opponent_score?: SortOrder
    team_score?: SortOrder
    teamId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    opponentConference?: SortOrder
    opponentDivision?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    opponentScore?: SortOrder
    homeScore?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrder
    scheduleWeek?: SortOrder
    opponentScore?: SortOrder
    homeScore?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    opponentConference?: SortOrder
    opponentDivision?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    opponentScore?: SortOrder
    homeScore?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    opponentConference?: SortOrder
    opponentDivision?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    opponentScore?: SortOrder
    homeScore?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    opponentId?: SortOrder
    homeTeamId?: SortOrder
    scheduleWeek?: SortOrder
    opponentScore?: SortOrder
    homeScore?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type Post_Season_ResultListRelationFilter = {
    every?: Post_Season_ResultWhereInput
    some?: Post_Season_ResultWhereInput
    none?: Post_Season_ResultWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Post_Season_ResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlayerCreateNestedOneWithoutCombine_ScoreInput = {
    create?: XOR<PlayerCreateWithoutCombine_ScoreInput, PlayerUncheckedCreateWithoutCombine_ScoreInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCombine_ScoreInput
    connect?: PlayerWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUpdateOneWithoutCombine_ScoreNestedInput = {
    create?: XOR<PlayerCreateWithoutCombine_ScoreInput, PlayerUncheckedCreateWithoutCombine_ScoreInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCombine_ScoreInput
    upsert?: PlayerUpsertWithoutCombine_ScoreInput
    disconnect?: PlayerWhereInput | boolean
    delete?: PlayerWhereInput | boolean
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutCombine_ScoreInput, PlayerUpdateWithoutCombine_ScoreInput>, PlayerUncheckedUpdateWithoutCombine_ScoreInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerCreateNestedOneWithoutPickInput = {
    create?: XOR<PlayerCreateWithoutPickInput, PlayerUncheckedCreateWithoutPickInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPickInput
    connect?: PlayerWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutPickInput = {
    create?: XOR<TeamCreateWithoutPickInput, TeamUncheckedCreateWithoutPickInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPickInput
    connect?: TeamWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PlayerUpdateOneRequiredWithoutPickNestedInput = {
    create?: XOR<PlayerCreateWithoutPickInput, PlayerUncheckedCreateWithoutPickInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPickInput
    upsert?: PlayerUpsertWithoutPickInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutPickInput, PlayerUpdateWithoutPickInput>, PlayerUncheckedUpdateWithoutPickInput>
  }

  export type TeamUpdateOneRequiredWithoutPickNestedInput = {
    create?: XOR<TeamCreateWithoutPickInput, TeamUncheckedCreateWithoutPickInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPickInput
    upsert?: TeamUpsertWithoutPickInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPickInput, TeamUpdateWithoutPickInput>, TeamUncheckedUpdateWithoutPickInput>
  }

  export type Combine_ScoreCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput> | Combine_ScoreCreateWithoutPlayerInput[] | Combine_ScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Combine_ScoreCreateOrConnectWithoutPlayerInput | Combine_ScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: Combine_ScoreCreateManyPlayerInputEnvelope
    connect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
  }

  export type PickCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput> | PickCreateWithoutPlayerInput[] | PickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PickCreateOrConnectWithoutPlayerInput | PickCreateOrConnectWithoutPlayerInput[]
    createMany?: PickCreateManyPlayerInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type TeamCreateNestedOneWithoutPlayerInput = {
    create?: XOR<TeamCreateWithoutPlayerInput, TeamUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayerInput
    connect?: TeamWhereUniqueInput
  }

  export type Player_AwardCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput> | Player_AwardCreateWithoutPlayerInput[] | Player_AwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Player_AwardCreateOrConnectWithoutPlayerInput | Player_AwardCreateOrConnectWithoutPlayerInput[]
    createMany?: Player_AwardCreateManyPlayerInputEnvelope
    connect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
  }

  export type Combine_ScoreUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput> | Combine_ScoreCreateWithoutPlayerInput[] | Combine_ScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Combine_ScoreCreateOrConnectWithoutPlayerInput | Combine_ScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: Combine_ScoreCreateManyPlayerInputEnvelope
    connect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
  }

  export type PickUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput> | PickCreateWithoutPlayerInput[] | PickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PickCreateOrConnectWithoutPlayerInput | PickCreateOrConnectWithoutPlayerInput[]
    createMany?: PickCreateManyPlayerInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type Player_AwardUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput> | Player_AwardCreateWithoutPlayerInput[] | Player_AwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Player_AwardCreateOrConnectWithoutPlayerInput | Player_AwardCreateOrConnectWithoutPlayerInput[]
    createMany?: Player_AwardCreateManyPlayerInputEnvelope
    connect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Combine_ScoreUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput> | Combine_ScoreCreateWithoutPlayerInput[] | Combine_ScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Combine_ScoreCreateOrConnectWithoutPlayerInput | Combine_ScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: Combine_ScoreUpsertWithWhereUniqueWithoutPlayerInput | Combine_ScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: Combine_ScoreCreateManyPlayerInputEnvelope
    set?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    disconnect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    delete?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    connect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    update?: Combine_ScoreUpdateWithWhereUniqueWithoutPlayerInput | Combine_ScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: Combine_ScoreUpdateManyWithWhereWithoutPlayerInput | Combine_ScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: Combine_ScoreScalarWhereInput | Combine_ScoreScalarWhereInput[]
  }

  export type PickUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput> | PickCreateWithoutPlayerInput[] | PickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PickCreateOrConnectWithoutPlayerInput | PickCreateOrConnectWithoutPlayerInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutPlayerInput | PickUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PickCreateManyPlayerInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutPlayerInput | PickUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PickUpdateManyWithWhereWithoutPlayerInput | PickUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type TeamUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<TeamCreateWithoutPlayerInput, TeamUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayerInput
    upsert?: TeamUpsertWithoutPlayerInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPlayerInput, TeamUpdateWithoutPlayerInput>, TeamUncheckedUpdateWithoutPlayerInput>
  }

  export type Player_AwardUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput> | Player_AwardCreateWithoutPlayerInput[] | Player_AwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Player_AwardCreateOrConnectWithoutPlayerInput | Player_AwardCreateOrConnectWithoutPlayerInput[]
    upsert?: Player_AwardUpsertWithWhereUniqueWithoutPlayerInput | Player_AwardUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: Player_AwardCreateManyPlayerInputEnvelope
    set?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    disconnect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    delete?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    connect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    update?: Player_AwardUpdateWithWhereUniqueWithoutPlayerInput | Player_AwardUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: Player_AwardUpdateManyWithWhereWithoutPlayerInput | Player_AwardUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: Player_AwardScalarWhereInput | Player_AwardScalarWhereInput[]
  }

  export type Combine_ScoreUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput> | Combine_ScoreCreateWithoutPlayerInput[] | Combine_ScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Combine_ScoreCreateOrConnectWithoutPlayerInput | Combine_ScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: Combine_ScoreUpsertWithWhereUniqueWithoutPlayerInput | Combine_ScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: Combine_ScoreCreateManyPlayerInputEnvelope
    set?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    disconnect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    delete?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    connect?: Combine_ScoreWhereUniqueInput | Combine_ScoreWhereUniqueInput[]
    update?: Combine_ScoreUpdateWithWhereUniqueWithoutPlayerInput | Combine_ScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: Combine_ScoreUpdateManyWithWhereWithoutPlayerInput | Combine_ScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: Combine_ScoreScalarWhereInput | Combine_ScoreScalarWhereInput[]
  }

  export type PickUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput> | PickCreateWithoutPlayerInput[] | PickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PickCreateOrConnectWithoutPlayerInput | PickCreateOrConnectWithoutPlayerInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutPlayerInput | PickUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PickCreateManyPlayerInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutPlayerInput | PickUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PickUpdateManyWithWhereWithoutPlayerInput | PickUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type Player_AwardUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput> | Player_AwardCreateWithoutPlayerInput[] | Player_AwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: Player_AwardCreateOrConnectWithoutPlayerInput | Player_AwardCreateOrConnectWithoutPlayerInput[]
    upsert?: Player_AwardUpsertWithWhereUniqueWithoutPlayerInput | Player_AwardUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: Player_AwardCreateManyPlayerInputEnvelope
    set?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    disconnect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    delete?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    connect?: Player_AwardWhereUniqueInput | Player_AwardWhereUniqueInput[]
    update?: Player_AwardUpdateWithWhereUniqueWithoutPlayerInput | Player_AwardUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: Player_AwardUpdateManyWithWhereWithoutPlayerInput | Player_AwardUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: Player_AwardScalarWhereInput | Player_AwardScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutPlayer_AwardInput = {
    create?: XOR<PlayerCreateWithoutPlayer_AwardInput, PlayerUncheckedCreateWithoutPlayer_AwardInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayer_AwardInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutPlayer_AwardNestedInput = {
    create?: XOR<PlayerCreateWithoutPlayer_AwardInput, PlayerUncheckedCreateWithoutPlayer_AwardInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayer_AwardInput
    upsert?: PlayerUpsertWithoutPlayer_AwardInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutPlayer_AwardInput, PlayerUpdateWithoutPlayer_AwardInput>, PlayerUncheckedUpdateWithoutPlayer_AwardInput>
  }

  export type TeamCreateNestedOneWithoutPost_Season_ResultInput = {
    create?: XOR<TeamCreateWithoutPost_Season_ResultInput, TeamUncheckedCreateWithoutPost_Season_ResultInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPost_Season_ResultInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneWithoutPost_Season_ResultNestedInput = {
    create?: XOR<TeamCreateWithoutPost_Season_ResultInput, TeamUncheckedCreateWithoutPost_Season_ResultInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPost_Season_ResultInput
    upsert?: TeamUpsertWithoutPost_Season_ResultInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPost_Season_ResultInput, TeamUpdateWithoutPost_Season_ResultInput>, TeamUncheckedUpdateWithoutPost_Season_ResultInput>
  }

  export type TeamCreateNestedOneWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_homeTeamIdToTeamInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutSchedule_Schedule_opponentIdToTeamInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_opponentIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_opponentIdToTeamInput
    connect?: TeamWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TeamUpdateOneWithoutSchedule_Schedule_homeTeamIdToTeamNestedInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_homeTeamIdToTeamInput
    upsert?: TeamUpsertWithoutSchedule_Schedule_homeTeamIdToTeamInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput>, TeamUncheckedUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
  }

  export type TeamUpdateOneRequiredWithoutSchedule_Schedule_opponentIdToTeamNestedInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_opponentIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_opponentIdToTeamInput
    upsert?: TeamUpsertWithoutSchedule_Schedule_opponentIdToTeamInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUpdateWithoutSchedule_Schedule_opponentIdToTeamInput>, TeamUncheckedUpdateWithoutSchedule_Schedule_opponentIdToTeamInput>
  }

  export type PickCreateNestedManyWithoutTeamInput = {
    create?: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput> | PickCreateWithoutTeamInput[] | PickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutTeamInput | PickCreateOrConnectWithoutTeamInput[]
    createMany?: PickCreateManyTeamInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type Post_Season_ResultCreateNestedManyWithoutTeamInput = {
    create?: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput> | Post_Season_ResultCreateWithoutTeamInput[] | Post_Season_ResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Post_Season_ResultCreateOrConnectWithoutTeamInput | Post_Season_ResultCreateOrConnectWithoutTeamInput[]
    createMany?: Post_Season_ResultCreateManyTeamInputEnvelope
    connect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_opponentIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type PickUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput> | PickCreateWithoutTeamInput[] | PickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutTeamInput | PickCreateOrConnectWithoutTeamInput[]
    createMany?: PickCreateManyTeamInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput> | Post_Season_ResultCreateWithoutTeamInput[] | Post_Season_ResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Post_Season_ResultCreateOrConnectWithoutTeamInput | Post_Season_ResultCreateOrConnectWithoutTeamInput[]
    createMany?: Post_Season_ResultCreateManyTeamInputEnvelope
    connect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_opponentIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type PickUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput> | PickCreateWithoutTeamInput[] | PickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutTeamInput | PickCreateOrConnectWithoutTeamInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutTeamInput | PickUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PickCreateManyTeamInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutTeamInput | PickUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PickUpdateManyWithWhereWithoutTeamInput | PickUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type Post_Season_ResultUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput> | Post_Season_ResultCreateWithoutTeamInput[] | Post_Season_ResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Post_Season_ResultCreateOrConnectWithoutTeamInput | Post_Season_ResultCreateOrConnectWithoutTeamInput[]
    upsert?: Post_Season_ResultUpsertWithWhereUniqueWithoutTeamInput | Post_Season_ResultUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: Post_Season_ResultCreateManyTeamInputEnvelope
    set?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    disconnect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    delete?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    connect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    update?: Post_Season_ResultUpdateWithWhereUniqueWithoutTeamInput | Post_Season_ResultUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: Post_Season_ResultUpdateManyWithWhereWithoutTeamInput | Post_Season_ResultUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: Post_Season_ResultScalarWhereInput | Post_Season_ResultScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_opponentIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_opponentIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type PickUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput> | PickCreateWithoutTeamInput[] | PickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutTeamInput | PickCreateOrConnectWithoutTeamInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutTeamInput | PickUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PickCreateManyTeamInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutTeamInput | PickUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PickUpdateManyWithWhereWithoutTeamInput | PickUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput> | Post_Season_ResultCreateWithoutTeamInput[] | Post_Season_ResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: Post_Season_ResultCreateOrConnectWithoutTeamInput | Post_Season_ResultCreateOrConnectWithoutTeamInput[]
    upsert?: Post_Season_ResultUpsertWithWhereUniqueWithoutTeamInput | Post_Season_ResultUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: Post_Season_ResultCreateManyTeamInputEnvelope
    set?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    disconnect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    delete?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    connect?: Post_Season_ResultWhereUniqueInput | Post_Season_ResultWhereUniqueInput[]
    update?: Post_Season_ResultUpdateWithWhereUniqueWithoutTeamInput | Post_Season_ResultUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: Post_Season_ResultUpdateManyWithWhereWithoutTeamInput | Post_Season_ResultUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: Post_Season_ResultScalarWhereInput | Post_Season_ResultScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_homeTeamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_homeTeamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_opponentIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_opponentIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_opponentIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PlayerCreateWithoutCombine_ScoreInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Pick?: PickCreateNestedManyWithoutPlayerInput
    Team?: TeamCreateNestedOneWithoutPlayerInput
    Player_Award?: Player_AwardCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutCombine_ScoreInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    teamId?: number | null
    year_entered_league?: number | null
    Pick?: PickUncheckedCreateNestedManyWithoutPlayerInput
    Player_Award?: Player_AwardUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutCombine_ScoreInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutCombine_ScoreInput, PlayerUncheckedCreateWithoutCombine_ScoreInput>
  }

  export type PlayerUpsertWithoutCombine_ScoreInput = {
    update: XOR<PlayerUpdateWithoutCombine_ScoreInput, PlayerUncheckedUpdateWithoutCombine_ScoreInput>
    create: XOR<PlayerCreateWithoutCombine_ScoreInput, PlayerUncheckedCreateWithoutCombine_ScoreInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutCombine_ScoreInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutCombine_ScoreInput, PlayerUncheckedUpdateWithoutCombine_ScoreInput>
  }

  export type PlayerUpdateWithoutCombine_ScoreInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Pick?: PickUpdateManyWithoutPlayerNestedInput
    Team?: TeamUpdateOneWithoutPlayerNestedInput
    Player_Award?: Player_AwardUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutCombine_ScoreInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Pick?: PickUncheckedUpdateManyWithoutPlayerNestedInput
    Player_Award?: Player_AwardUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateWithoutPickInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreCreateNestedManyWithoutPlayerInput
    Team?: TeamCreateNestedOneWithoutPlayerInput
    Player_Award?: Player_AwardCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutPickInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    teamId?: number | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreUncheckedCreateNestedManyWithoutPlayerInput
    Player_Award?: Player_AwardUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutPickInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutPickInput, PlayerUncheckedCreateWithoutPickInput>
  }

  export type TeamCreateWithoutPickInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Player?: PlayerCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutPickInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Player?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutPickInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPickInput, TeamUncheckedCreateWithoutPickInput>
  }

  export type PlayerUpsertWithoutPickInput = {
    update: XOR<PlayerUpdateWithoutPickInput, PlayerUncheckedUpdateWithoutPickInput>
    create: XOR<PlayerCreateWithoutPickInput, PlayerUncheckedCreateWithoutPickInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutPickInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutPickInput, PlayerUncheckedUpdateWithoutPickInput>
  }

  export type PlayerUpdateWithoutPickInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUpdateManyWithoutPlayerNestedInput
    Team?: TeamUpdateOneWithoutPlayerNestedInput
    Player_Award?: Player_AwardUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUncheckedUpdateManyWithoutPlayerNestedInput
    Player_Award?: Player_AwardUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type TeamUpsertWithoutPickInput = {
    update: XOR<TeamUpdateWithoutPickInput, TeamUncheckedUpdateWithoutPickInput>
    create: XOR<TeamCreateWithoutPickInput, TeamUncheckedCreateWithoutPickInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPickInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPickInput, TeamUncheckedUpdateWithoutPickInput>
  }

  export type TeamUpdateWithoutPickInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Player?: PlayerUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Player?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type Combine_ScoreCreateWithoutPlayerInput = {
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type Combine_ScoreUncheckedCreateWithoutPlayerInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type Combine_ScoreCreateOrConnectWithoutPlayerInput = {
    where: Combine_ScoreWhereUniqueInput
    create: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput>
  }

  export type Combine_ScoreCreateManyPlayerInputEnvelope = {
    data: Combine_ScoreCreateManyPlayerInput | Combine_ScoreCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PickCreateWithoutPlayerInput = {
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Team: TeamCreateNestedOneWithoutPickInput
  }

  export type PickUncheckedCreateWithoutPlayerInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Team_id: number
  }

  export type PickCreateOrConnectWithoutPlayerInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput>
  }

  export type PickCreateManyPlayerInputEnvelope = {
    data: PickCreateManyPlayerInput | PickCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutPlayerInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutPlayerInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickUncheckedCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutPlayerInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayerInput, TeamUncheckedCreateWithoutPlayerInput>
  }

  export type Player_AwardCreateWithoutPlayerInput = {
    award_name?: string | null
    year_awarded?: number | null
  }

  export type Player_AwardUncheckedCreateWithoutPlayerInput = {
    id?: number
    award_name?: string | null
    year_awarded?: number | null
  }

  export type Player_AwardCreateOrConnectWithoutPlayerInput = {
    where: Player_AwardWhereUniqueInput
    create: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput>
  }

  export type Player_AwardCreateManyPlayerInputEnvelope = {
    data: Player_AwardCreateManyPlayerInput | Player_AwardCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type Combine_ScoreUpsertWithWhereUniqueWithoutPlayerInput = {
    where: Combine_ScoreWhereUniqueInput
    update: XOR<Combine_ScoreUpdateWithoutPlayerInput, Combine_ScoreUncheckedUpdateWithoutPlayerInput>
    create: XOR<Combine_ScoreCreateWithoutPlayerInput, Combine_ScoreUncheckedCreateWithoutPlayerInput>
  }

  export type Combine_ScoreUpdateWithWhereUniqueWithoutPlayerInput = {
    where: Combine_ScoreWhereUniqueInput
    data: XOR<Combine_ScoreUpdateWithoutPlayerInput, Combine_ScoreUncheckedUpdateWithoutPlayerInput>
  }

  export type Combine_ScoreUpdateManyWithWhereWithoutPlayerInput = {
    where: Combine_ScoreScalarWhereInput
    data: XOR<Combine_ScoreUpdateManyMutationInput, Combine_ScoreUncheckedUpdateManyWithoutPlayerInput>
  }

  export type Combine_ScoreScalarWhereInput = {
    AND?: Combine_ScoreScalarWhereInput | Combine_ScoreScalarWhereInput[]
    OR?: Combine_ScoreScalarWhereInput[]
    NOT?: Combine_ScoreScalarWhereInput | Combine_ScoreScalarWhereInput[]
    id?: IntFilter<"Combine_Score"> | number
    fortyTime?: FloatNullableFilter<"Combine_Score"> | number | null
    tenYardSplit?: FloatNullableFilter<"Combine_Score"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Combine_Score"> | number | null
    threeCone?: FloatNullableFilter<"Combine_Score"> | number | null
    verticalLeap?: FloatNullableFilter<"Combine_Score"> | number | null
    playerId?: IntNullableFilter<"Combine_Score"> | number | null
    broadJump?: FloatNullableFilter<"Combine_Score"> | number | null
  }

  export type PickUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutPlayerInput, PickUncheckedUpdateWithoutPlayerInput>
    create: XOR<PickCreateWithoutPlayerInput, PickUncheckedCreateWithoutPlayerInput>
  }

  export type PickUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutPlayerInput, PickUncheckedUpdateWithoutPlayerInput>
  }

  export type PickUpdateManyWithWhereWithoutPlayerInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PickScalarWhereInput = {
    AND?: PickScalarWhereInput | PickScalarWhereInput[]
    OR?: PickScalarWhereInput[]
    NOT?: PickScalarWhereInput | PickScalarWhereInput[]
    id?: IntFilter<"Pick"> | number
    selectionRound?: IntNullableFilter<"Pick"> | number | null
    selectionNumber?: IntNullableFilter<"Pick"> | number | null
    selectionYear?: StringNullableFilter<"Pick"> | string | null
    selectionPickFrom?: StringNullableFilter<"Pick"> | string | null
    selectionPickTo?: StringNullableFilter<"Pick"> | string | null
    combineScore?: IntNullableFilter<"Pick"> | number | null
    Team_id?: IntFilter<"Pick"> | number
    Player_id?: IntFilter<"Pick"> | number
  }

  export type TeamUpsertWithoutPlayerInput = {
    update: XOR<TeamUpdateWithoutPlayerInput, TeamUncheckedUpdateWithoutPlayerInput>
    create: XOR<TeamCreateWithoutPlayerInput, TeamUncheckedCreateWithoutPlayerInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPlayerInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPlayerInput, TeamUncheckedUpdateWithoutPlayerInput>
  }

  export type TeamUpdateWithoutPlayerInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUncheckedUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type Player_AwardUpsertWithWhereUniqueWithoutPlayerInput = {
    where: Player_AwardWhereUniqueInput
    update: XOR<Player_AwardUpdateWithoutPlayerInput, Player_AwardUncheckedUpdateWithoutPlayerInput>
    create: XOR<Player_AwardCreateWithoutPlayerInput, Player_AwardUncheckedCreateWithoutPlayerInput>
  }

  export type Player_AwardUpdateWithWhereUniqueWithoutPlayerInput = {
    where: Player_AwardWhereUniqueInput
    data: XOR<Player_AwardUpdateWithoutPlayerInput, Player_AwardUncheckedUpdateWithoutPlayerInput>
  }

  export type Player_AwardUpdateManyWithWhereWithoutPlayerInput = {
    where: Player_AwardScalarWhereInput
    data: XOR<Player_AwardUpdateManyMutationInput, Player_AwardUncheckedUpdateManyWithoutPlayerInput>
  }

  export type Player_AwardScalarWhereInput = {
    AND?: Player_AwardScalarWhereInput | Player_AwardScalarWhereInput[]
    OR?: Player_AwardScalarWhereInput[]
    NOT?: Player_AwardScalarWhereInput | Player_AwardScalarWhereInput[]
    id?: IntFilter<"Player_Award"> | number
    playerId?: IntFilter<"Player_Award"> | number
    award_name?: StringNullableFilter<"Player_Award"> | string | null
    year_awarded?: IntNullableFilter<"Player_Award"> | number | null
  }

  export type PlayerCreateWithoutPlayer_AwardInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreCreateNestedManyWithoutPlayerInput
    Pick?: PickCreateNestedManyWithoutPlayerInput
    Team?: TeamCreateNestedOneWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutPlayer_AwardInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    teamId?: number | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreUncheckedCreateNestedManyWithoutPlayerInput
    Pick?: PickUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutPlayer_AwardInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutPlayer_AwardInput, PlayerUncheckedCreateWithoutPlayer_AwardInput>
  }

  export type PlayerUpsertWithoutPlayer_AwardInput = {
    update: XOR<PlayerUpdateWithoutPlayer_AwardInput, PlayerUncheckedUpdateWithoutPlayer_AwardInput>
    create: XOR<PlayerCreateWithoutPlayer_AwardInput, PlayerUncheckedCreateWithoutPlayer_AwardInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutPlayer_AwardInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutPlayer_AwardInput, PlayerUncheckedUpdateWithoutPlayer_AwardInput>
  }

  export type PlayerUpdateWithoutPlayer_AwardInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUpdateManyWithoutPlayerNestedInput
    Pick?: PickUpdateManyWithoutPlayerNestedInput
    Team?: TeamUpdateOneWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutPlayer_AwardInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUncheckedUpdateManyWithoutPlayerNestedInput
    Pick?: PickUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type TeamCreateWithoutPost_Season_ResultInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickCreateNestedManyWithoutTeamInput
    Player?: PlayerCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutPost_Season_ResultInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickUncheckedCreateNestedManyWithoutTeamInput
    Player?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutPost_Season_ResultInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPost_Season_ResultInput, TeamUncheckedCreateWithoutPost_Season_ResultInput>
  }

  export type TeamUpsertWithoutPost_Season_ResultInput = {
    update: XOR<TeamUpdateWithoutPost_Season_ResultInput, TeamUncheckedUpdateWithoutPost_Season_ResultInput>
    create: XOR<TeamCreateWithoutPost_Season_ResultInput, TeamUncheckedCreateWithoutPost_Season_ResultInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPost_Season_ResultInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPost_Season_ResultInput, TeamUncheckedUpdateWithoutPost_Season_ResultInput>
  }

  export type TeamUpdateWithoutPost_Season_ResultInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUpdateManyWithoutTeamNestedInput
    Player?: PlayerUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPost_Season_ResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUncheckedUpdateManyWithoutTeamNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickCreateNestedManyWithoutTeamInput
    Player?: PlayerCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickUncheckedCreateNestedManyWithoutTeamInput
    Player?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_opponentIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
  }

  export type TeamCreateWithoutSchedule_Schedule_opponentIdToTeamInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickCreateNestedManyWithoutTeamInput
    Player?: PlayerCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutSchedule_Schedule_opponentIdToTeamInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    Pick?: PickUncheckedCreateNestedManyWithoutTeamInput
    Player?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    Post_Season_Result?: Post_Season_ResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_homeTeamIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutSchedule_Schedule_opponentIdToTeamInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_opponentIdToTeamInput>
  }

  export type TeamUpsertWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    update: XOR<TeamUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
    create: XOR<TeamCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput>
  }

  export type TeamUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUpdateManyWithoutTeamNestedInput
    Player?: PlayerUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSchedule_Schedule_homeTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUncheckedUpdateManyWithoutTeamNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_opponentIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamNestedInput
  }

  export type TeamUpsertWithoutSchedule_Schedule_opponentIdToTeamInput = {
    update: XOR<TeamUpdateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_opponentIdToTeamInput>
    create: XOR<TeamCreateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_opponentIdToTeamInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSchedule_Schedule_opponentIdToTeamInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSchedule_Schedule_opponentIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_opponentIdToTeamInput>
  }

  export type TeamUpdateWithoutSchedule_Schedule_opponentIdToTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUpdateManyWithoutTeamNestedInput
    Player?: PlayerUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSchedule_Schedule_opponentIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    Pick?: PickUncheckedUpdateManyWithoutTeamNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    Post_Season_Result?: Post_Season_ResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_homeTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamNestedInput
  }

  export type PickCreateWithoutTeamInput = {
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Player: PlayerCreateNestedOneWithoutPickInput
  }

  export type PickUncheckedCreateWithoutTeamInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Player_id: number
  }

  export type PickCreateOrConnectWithoutTeamInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput>
  }

  export type PickCreateManyTeamInputEnvelope = {
    data: PickCreateManyTeamInput | PickCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutTeamInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreCreateNestedManyWithoutPlayerInput
    Pick?: PickCreateNestedManyWithoutPlayerInput
    Player_Award?: Player_AwardCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
    Combine_Score?: Combine_ScoreUncheckedCreateNestedManyWithoutPlayerInput
    Pick?: PickUncheckedCreateNestedManyWithoutPlayerInput
    Player_Award?: Player_AwardUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: PlayerCreateManyTeamInput | PlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type Post_Season_ResultCreateWithoutTeamInput = {
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
  }

  export type Post_Season_ResultUncheckedCreateWithoutTeamInput = {
    id?: number
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
  }

  export type Post_Season_ResultCreateOrConnectWithoutTeamInput = {
    where: Post_Season_ResultWhereUniqueInput
    create: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput>
  }

  export type Post_Season_ResultCreateManyTeamInputEnvelope = {
    data: Post_Season_ResultCreateManyTeamInput | Post_Season_ResultCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
    Team_Schedule_opponentIdToTeam: TeamCreateNestedOneWithoutSchedule_Schedule_opponentIdToTeamInput
  }

  export type ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    id?: number
    opponentId: number
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type ScheduleCreateOrConnectWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput>
  }

  export type ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInputEnvelope = {
    data: ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInput | ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput = {
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
    Team_Schedule_homeTeamIdToTeam?: TeamCreateNestedOneWithoutSchedule_Schedule_homeTeamIdToTeamInput
  }

  export type ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput = {
    id?: number
    homeTeamId?: number | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type ScheduleCreateOrConnectWithoutTeam_Schedule_opponentIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput>
  }

  export type ScheduleCreateManyTeam_Schedule_opponentIdToTeamInputEnvelope = {
    data: ScheduleCreateManyTeam_Schedule_opponentIdToTeamInput | ScheduleCreateManyTeam_Schedule_opponentIdToTeamInput[]
    skipDuplicates?: boolean
  }

  export type PickUpsertWithWhereUniqueWithoutTeamInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutTeamInput, PickUncheckedUpdateWithoutTeamInput>
    create: XOR<PickCreateWithoutTeamInput, PickUncheckedCreateWithoutTeamInput>
  }

  export type PickUpdateWithWhereUniqueWithoutTeamInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutTeamInput, PickUncheckedUpdateWithoutTeamInput>
  }

  export type PickUpdateManyWithWhereWithoutTeamInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    teamId?: IntNullableFilter<"Player"> | number | null
    year_entered_league?: IntNullableFilter<"Player"> | number | null
  }

  export type Post_Season_ResultUpsertWithWhereUniqueWithoutTeamInput = {
    where: Post_Season_ResultWhereUniqueInput
    update: XOR<Post_Season_ResultUpdateWithoutTeamInput, Post_Season_ResultUncheckedUpdateWithoutTeamInput>
    create: XOR<Post_Season_ResultCreateWithoutTeamInput, Post_Season_ResultUncheckedCreateWithoutTeamInput>
  }

  export type Post_Season_ResultUpdateWithWhereUniqueWithoutTeamInput = {
    where: Post_Season_ResultWhereUniqueInput
    data: XOR<Post_Season_ResultUpdateWithoutTeamInput, Post_Season_ResultUncheckedUpdateWithoutTeamInput>
  }

  export type Post_Season_ResultUpdateManyWithWhereWithoutTeamInput = {
    where: Post_Season_ResultScalarWhereInput
    data: XOR<Post_Season_ResultUpdateManyMutationInput, Post_Season_ResultUncheckedUpdateManyWithoutTeamInput>
  }

  export type Post_Season_ResultScalarWhereInput = {
    AND?: Post_Season_ResultScalarWhereInput | Post_Season_ResultScalarWhereInput[]
    OR?: Post_Season_ResultScalarWhereInput[]
    NOT?: Post_Season_ResultScalarWhereInput | Post_Season_ResultScalarWhereInput[]
    id?: IntFilter<"Post_Season_Result"> | number
    playoff_year?: IntFilter<"Post_Season_Result"> | number
    last_round_reached?: StringNullableFilter<"Post_Season_Result"> | string | null
    win_lose?: StringNullableFilter<"Post_Season_Result"> | string | null
    opponent_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    team_score?: IntNullableFilter<"Post_Season_Result"> | number | null
    teamId?: IntNullableFilter<"Post_Season_Result"> | number | null
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput>
    create: XOR<ScheduleCreateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_homeTeamIdToTeamInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    opponentId?: IntFilter<"Schedule"> | number
    homeTeamId?: IntNullableFilter<"Schedule"> | number | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    opponentConference?: StringNullableFilter<"Schedule"> | string | null
    opponentDivision?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    opponentScore?: IntNullableFilter<"Schedule"> | number | null
    homeScore?: IntNullableFilter<"Schedule"> | number | null
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_opponentIdToTeamInput>
    create: XOR<ScheduleCreateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_opponentIdToTeamInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_opponentIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTeam_Schedule_opponentIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_opponentIdToTeamInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTeam_Schedule_opponentIdToTeamInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamInput>
  }

  export type Combine_ScoreCreateManyPlayerInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type PickCreateManyPlayerInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Team_id: number
  }

  export type Player_AwardCreateManyPlayerInput = {
    id?: number
    award_name?: string | null
    year_awarded?: number | null
  }

  export type Combine_ScoreUpdateWithoutPlayerInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Combine_ScoreUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Combine_ScoreUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PickUpdateWithoutPlayerInput = {
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutPickNestedInput
  }

  export type PickUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_id?: IntFieldUpdateOperationsInput | number
  }

  export type PickUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_id?: IntFieldUpdateOperationsInput | number
  }

  export type Player_AwardUpdateWithoutPlayerInput = {
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Player_AwardUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Player_AwardUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    award_name?: NullableStringFieldUpdateOperationsInput | string | null
    year_awarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickCreateManyTeamInput = {
    id?: number
    selectionRound?: number | null
    selectionNumber?: number | null
    selectionYear?: string | null
    selectionPickFrom?: string | null
    selectionPickTo?: string | null
    combineScore?: number | null
    Player_id: number
  }

  export type PlayerCreateManyTeamInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    year_entered_league?: number | null
  }

  export type Post_Season_ResultCreateManyTeamInput = {
    id?: number
    playoff_year: number
    last_round_reached?: string | null
    win_lose?: string | null
    opponent_score?: number | null
    team_score?: number | null
  }

  export type ScheduleCreateManyTeam_Schedule_homeTeamIdToTeamInput = {
    id?: number
    opponentId: number
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type ScheduleCreateManyTeam_Schedule_opponentIdToTeamInput = {
    id?: number
    homeTeamId?: number | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    opponentConference?: string | null
    opponentDivision?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    opponentScore?: number | null
    homeScore?: number | null
  }

  export type PickUpdateWithoutTeamInput = {
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPickNestedInput
  }

  export type PickUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Player_id?: IntFieldUpdateOperationsInput | number
  }

  export type PickUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    selectionRound?: NullableIntFieldUpdateOperationsInput | number | null
    selectionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    selectionYear?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickFrom?: NullableStringFieldUpdateOperationsInput | string | null
    selectionPickTo?: NullableStringFieldUpdateOperationsInput | string | null
    combineScore?: NullableIntFieldUpdateOperationsInput | number | null
    Player_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerUpdateWithoutTeamInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUpdateManyWithoutPlayerNestedInput
    Pick?: PickUpdateManyWithoutPlayerNestedInput
    Player_Award?: Player_AwardUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
    Combine_Score?: Combine_ScoreUncheckedUpdateManyWithoutPlayerNestedInput
    Pick?: PickUncheckedUpdateManyWithoutPlayerNestedInput
    Player_Award?: Player_AwardUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    year_entered_league?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultUpdateWithoutTeamInput = {
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Post_Season_ResultUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoff_year?: IntFieldUpdateOperationsInput | number
    last_round_reached?: NullableStringFieldUpdateOperationsInput | string | null
    win_lose?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_score?: NullableIntFieldUpdateOperationsInput | number | null
    team_score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_opponentIdToTeam?: TeamUpdateOneRequiredWithoutSchedule_Schedule_opponentIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    opponentId?: IntFieldUpdateOperationsInput | number
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_homeTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    opponentId?: IntFieldUpdateOperationsInput | number
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUpdateWithoutTeam_Schedule_opponentIdToTeamInput = {
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_homeTeamIdToTeam?: TeamUpdateOneWithoutSchedule_Schedule_homeTeamIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutTeam_Schedule_opponentIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_opponentIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    opponentConference?: NullableStringFieldUpdateOperationsInput | string | null
    opponentDivision?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Combine_ScoreDefaultArgs instead
     */
    export type Combine_ScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Combine_ScoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PickDefaultArgs instead
     */
    export type PickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PickDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Player_AwardDefaultArgs instead
     */
    export type Player_AwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Player_AwardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Post_Season_ResultDefaultArgs instead
     */
    export type Post_Season_ResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Post_Season_ResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}